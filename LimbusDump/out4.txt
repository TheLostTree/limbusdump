class ReqPacket_EnterHellsChickenDungeonCommand {
	public dungeonid?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_EnterHellsChickenDungeonCommand()
		obj.dungeonid = json.dungeonid
		return obj
	}

}

class ReqPacket_ReEnterHellsChickenDungeonCommand {
	public dungeonid?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_ReEnterHellsChickenDungeonCommand()
		obj.dungeonid = json.dungeonid
		return obj
	}

}

class ReqPacket_ExitHellsChickenDungeonCommand {
	public mainchapterid?: number;
	public subchapterid?: number;
	public nodeid?: number;
	public isClear?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_ExitHellsChickenDungeonCommand()
		obj.mainchapterid = json.mainchapterid
		obj.subchapterid = json.subchapterid
		obj.nodeid = json.nodeid
		obj.isClear = json.isClear
		return obj
	}

}

class ReqPacket_AcquireEgoGiftEventHellsChickenDungeonCommand {
	public selectIndexList?: number[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_AcquireEgoGiftEventHellsChickenDungeonCommand()
		obj.selectIndexList = json.selectIndexList
		return obj
	}

}

class ResPacket_GetHellsChickenState {
	public dollsNum?: number;
	public rewardState?: number[];
	public static fromJSON(json:any){
		let obj = new ResPacket_GetHellsChickenState()
		obj.dollsNum = json.dollsNum
		obj.rewardState = json.rewardState
		return obj
	}

}

class ReqPacket_AcquireHellsChickenReward {
	public rewardId?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_AcquireHellsChickenReward()
		obj.rewardId = json.rewardId
		return obj
	}

}

class ReqPacket_SetTimeMinuteOffset {
	public password?: string;
	public timeMinuteOffset?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_SetTimeMinuteOffset()
		obj.password = json.password
		obj.timeMinuteOffset = json.timeMinuteOffset
		return obj
	}

}

class ResPacket_SetTimeMinuteOffset {
	public serverTime?: string;
	public static fromJSON(json:any){
		let obj = new ResPacket_SetTimeMinuteOffset()
		obj.serverTime = json.serverTime
		return obj
	}

}

class ReqPacket_ChangeCurrentAnnouncer {
	public announcerIds?: number[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_ChangeCurrentAnnouncer()
		obj.announcerIds = json.announcerIds
		return obj
	}

}

class ResPacket_GetAttendanceState {
	public rewardState?: number[];
	public consumption?: number;
	public static fromJSON(json:any){
		let obj = new ResPacket_GetAttendanceState()
		obj.rewardState = json.rewardState
		obj.consumption = json.consumption
		return obj
	}

}

class ReqPacket_AcquireAttendanceReward {
	public partid?: number;
	public id?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_AcquireAttendanceReward()
		obj.partid = json.partid
		obj.id = json.id
		return obj
	}

}

class ReqPacket_BattlePassMissionReward {
	public missionType?: number;
	public missionId?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_BattlePassMissionReward()
		obj.missionType = json.missionType
		obj.missionId = json.missionId
		return obj
	}

}

class ReqPacket_BattlePassReward {
	public level?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_BattlePassReward()
		obj.level = json.level
		return obj
	}

}

class ReqPacket_PurchaseBattlePassLevel {
	public level?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_PurchaseBattlePassLevel()
		obj.level = json.level
		return obj
	}

}

class ReqPacket_EnterExpDungeon {
	public dungeonid?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_EnterExpDungeon()
		obj.dungeonid = json.dungeonid
		return obj
	}

}

class ResPacket_EnterExpDungeon {
	public isclear?: number;
	public static fromJSON(json:any){
		let obj = new ResPacket_EnterExpDungeon()
		obj.isclear = json.isclear
		return obj
	}

}

class ReqPacket_SkipExpDungeon {
	public dungeonid?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_SkipExpDungeon()
		obj.dungeonid = json.dungeonid
		return obj
	}

}

class ReqPacket_EnterThreadDungeon {
	public dungeonid?: number;
	public level?: number;
	public abnormalityids?: number[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_EnterThreadDungeon()
		obj.dungeonid = json.dungeonid
		obj.level = json.level
		obj.abnormalityids = json.abnormalityids
		return obj
	}

}

class ReqPacket_SkipThreadDungeon {
	public dungeonid?: number;
	public dungeonlevel?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_SkipThreadDungeon()
		obj.dungeonid = json.dungeonid
		obj.dungeonlevel = json.dungeonlevel
		return obj
	}

}

class ReqPacket_AcquireDailyLoginReward {
	public weekid?: number;
	public id?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_AcquireDailyLoginReward()
		obj.weekid = json.weekid
		obj.id = json.id
		return obj
	}

}

class ResPacket_GetDanteNoteState {
	public page?: number;
	public todayPage?: number;
	public static fromJSON(json:any){
		let obj = new ResPacket_GetDanteNoteState()
		obj.page = json.page
		obj.todayPage = json.todayPage
		return obj
	}

}

class ReqPacket_GetStageProgressRateRewardCommand {
	public mainchapterid?: number;
	public subchapterid?: number;
	public rewardType?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_GetStageProgressRateRewardCommand()
		obj.mainchapterid = json.mainchapterid
		obj.subchapterid = json.subchapterid
		obj.rewardType = json.rewardType
		return obj
	}

}

class ReqPacket_EnterStageBattleCommand {
	public mainchapterid?: number;
	public subchapterid?: number;
	public nodeid?: number;
	public stageid?: number;
	public abnormalityids?: number[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_EnterStageBattleCommand()
		obj.mainchapterid = json.mainchapterid
		obj.subchapterid = json.subchapterid
		obj.nodeid = json.nodeid
		obj.stageid = json.stageid
		obj.abnormalityids = json.abnormalityids
		return obj
	}

}

class ReqPacket_GetDungeonSaveInfoAll {
	public railwayDungeonId?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_GetDungeonSaveInfoAll()
		obj.railwayDungeonId = json.railwayDungeonId
		return obj
	}

}

class ReqPacket_ReEnterStoryDungeonCommand {
	public stageid?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_ReEnterStoryDungeonCommand()
		obj.stageid = json.stageid
		return obj
	}

}

class ReqPacket_ExitStoryDungeonCommand {
	public mainchapterid?: number;
	public subchapterid?: number;
	public nodeid?: number;
	public stageid?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_ExitStoryDungeonCommand()
		obj.mainchapterid = json.mainchapterid
		obj.subchapterid = json.subchapterid
		obj.nodeid = json.nodeid
		obj.stageid = json.stageid
		return obj
	}

}

class ReqPacket_EnterStoryDungeonMapNodeCommand {
	public floornumber?: number;
	public sectornumber?: number;
	public nodeid?: number;
	public abnormalityids?: number[];
	public participatedPIds?: number[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_EnterStoryDungeonMapNodeCommand()
		obj.floornumber = json.floornumber
		obj.sectornumber = json.sectornumber
		obj.nodeid = json.nodeid
		obj.abnormalityids = json.abnormalityids
		obj.participatedPIds = json.participatedPIds
		return obj
	}

}

class ReqPacket_ExitStoryCommand {
	public mainchapterid?: number;
	public subchapterid?: number;
	public nodeid?: number;
	public stageid?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_ExitStoryCommand()
		obj.mainchapterid = json.mainchapterid
		obj.subchapterid = json.subchapterid
		obj.nodeid = json.nodeid
		obj.stageid = json.stageid
		return obj
	}

}

class ReqPacket_GetAbnormalityLogData {
	public abnormalityIds?: number[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_GetAbnormalityLogData()
		obj.abnormalityIds = json.abnormalityIds
		return obj
	}

}

class ReqPacket_GetStoryDungeonNodeRecord {
	public dungeonid?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_GetStoryDungeonNodeRecord()
		obj.dungeonid = json.dungeonid
		return obj
	}

}

class ResPacket_GetStoryDungeonNodeRecord {
	public nodes?: number[];
	public Nodes?: number[];
	public static fromJSON(json:any){
		let obj = new ResPacket_GetStoryDungeonNodeRecord()
		obj.nodes = json.nodes
		obj.Nodes = json.Nodes
		return obj
	}

}

class ReqPacket_PlayGacha {
	public gachaId?: number;
	public paymentId?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_PlayGacha()
		obj.gachaId = json.gachaId
		obj.paymentId = json.paymentId
		return obj
	}

}

class ReqPacket_UseGachaPityPoint {
	public gachaId?: number;
	public targetIdx?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_UseGachaPityPoint()
		obj.gachaId = json.gachaId
		obj.targetIdx = json.targetIdx
		return obj
	}

}

class ReqPacket_Purchase {
	public productId?: string;
	public receipt?: string;
	public platform?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_Purchase()
		obj.productId = json.productId
		obj.receipt = json.receipt
		obj.platform = json.platform
		return obj
	}

}

class ReqPacket_PurchaseAsGoogle {
	public productId?: string;
	public receipt?: string;
	public static fromJSON(json:any){
		let obj = new ReqPacket_PurchaseAsGoogle()
		obj.productId = json.productId
		obj.receipt = json.receipt
		return obj
	}

}

class ReqPacket_PurchaseAsApple {
	public productId?: string;
	public receipt?: string;
	public static fromJSON(json:any){
		let obj = new ReqPacket_PurchaseAsApple()
		obj.productId = json.productId
		obj.receipt = json.receipt
		return obj
	}

}

class ReqPacket_InitPurchaseAsSteam {
	public productId?: string;
	public steamId?: string;
	public language?: string;
	public productDesc?: string;
	public static fromJSON(json:any){
		let obj = new ReqPacket_InitPurchaseAsSteam()
		obj.productId = json.productId
		obj.steamId = json.steamId
		obj.language = json.language
		obj.productDesc = json.productDesc
		return obj
	}

}

class ReqPacket_FinalizePurchaseAsSteam {
	public orderId?: string;
	public static fromJSON(json:any){
		let obj = new ReqPacket_FinalizePurchaseAsSteam()
		obj.orderId = json.orderId
		return obj
	}

}

class ReqPacket_InitPurchase {
	public productId?: string;
	public static fromJSON(json:any){
		let obj = new ReqPacket_InitPurchase()
		obj.productId = json.productId
		return obj
	}

}

class ResPacket_InitPurchase {
	public resultState?: string;
	public IsPurchasable?: boolean;
	public static fromJSON(json:any){
		let obj = new ResPacket_InitPurchase()
		obj.resultState = json.resultState
		obj.IsPurchasable = json.IsPurchasable
		return obj
	}

}

class ReqPacket_PurchaseEnkephalinModule {
	public num?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_PurchaseEnkephalinModule()
		obj.num = json.num
		return obj
	}

}

class ReqPacket_PurchaseEnkephalin {
	public num?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_PurchaseEnkephalin()
		obj.num = json.num
		return obj
	}

}

class ReqPacket_PersonalityGacksung {
	public personalityId?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_PersonalityGacksung()
		obj.personalityId = json.personalityId
		return obj
	}

}

class ReqPacket_SetPersonalityGacksungIllust {
	public personalityId?: number;
	public type?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_SetPersonalityGacksungIllust()
		obj.personalityId = json.personalityId
		obj.type = json.type
		return obj
	}

}

class ReqPacket_EgoGacksung {
	public egoId?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_EgoGacksung()
		obj.egoId = json.egoId
		return obj
	}

}

class ReqPacket_LoadUserDataAll {
	public static fromJSON(json:any){
		let obj = new ReqPacket_LoadUserDataAll()
		return obj
	}

}

class ReqPacket_SignInAsGuest {
	public guestId?: number;
	public authToken?: string;
	public version?: string;
	public deviceModel?: string;
	public static fromJSON(json:any){
		let obj = new ReqPacket_SignInAsGuest()
		obj.guestId = json.guestId
		obj.authToken = json.authToken
		obj.version = json.version
		obj.deviceModel = json.deviceModel
		return obj
	}

}

class ReqPacket_SignInAsNewGuest {
	public deviceModel?: string;
	public static fromJSON(json:any){
		let obj = new ReqPacket_SignInAsNewGuest()
		obj.deviceModel = json.deviceModel
		return obj
	}

}

class ReqPacket_SignInAsGoogle {
	public googleToken?: string;
	public version?: string;
	public deviceModel?: string;
	public static fromJSON(json:any){
		let obj = new ReqPacket_SignInAsGoogle()
		obj.googleToken = json.googleToken
		obj.version = json.version
		obj.deviceModel = json.deviceModel
		return obj
	}

}

class ReqPacket_LinkWithGoogle {
	public googleToken?: string;
	public version?: string;
	public static fromJSON(json:any){
		let obj = new ReqPacket_LinkWithGoogle()
		obj.googleToken = json.googleToken
		obj.version = json.version
		return obj
	}

}

class ReqPacket_SignInAsApple {
	public appleToken?: string;
	public version?: string;
	public deviceModel?: string;
	public static fromJSON(json:any){
		let obj = new ReqPacket_SignInAsApple()
		obj.appleToken = json.appleToken
		obj.version = json.version
		obj.deviceModel = json.deviceModel
		return obj
	}

}

class ReqPacket_LinkWithApple {
	public appleToken?: string;
	public version?: string;
	public static fromJSON(json:any){
		let obj = new ReqPacket_LinkWithApple()
		obj.appleToken = json.appleToken
		obj.version = json.version
		return obj
	}

}

class ReqPacket_SignInAsSteam {
	public steamToken?: string;
	public version?: string;
	public deviceModel?: string;
	public static fromJSON(json:any){
		let obj = new ReqPacket_SignInAsSteam()
		obj.steamToken = json.steamToken
		obj.version = json.version
		obj.deviceModel = json.deviceModel
		return obj
	}

}

class ReqPacket_RefreshLinkAuth {
	public details?: string;
	public static fromJSON(json:any){
		let obj = new ReqPacket_RefreshLinkAuth()
		obj.details = json.details
		return obj
	}

}

class ReqPacket_GetInfoOfLinkWith {
	public targetPublicId?: string;
	public password?: string;
	public static fromJSON(json:any){
		let obj = new ReqPacket_GetInfoOfLinkWith()
		obj.targetPublicId = json.targetPublicId
		obj.password = json.password
		return obj
	}

}

class ResPacket_GetInfoOfLinkWith {
	public details?: string;
	public state?: string;
	public static fromJSON(json:any){
		let obj = new ResPacket_GetInfoOfLinkWith()
		obj.details = json.details
		obj.state = json.state
		return obj
	}

}

class ReqPacket_LinkWithAnother {
	public targetPublicId?: string;
	public password?: string;
	public mainIsTarget?: boolean;
	public static fromJSON(json:any){
		let obj = new ReqPacket_LinkWithAnother()
		obj.targetPublicId = json.targetPublicId
		obj.password = json.password
		obj.mainIsTarget = json.mainIsTarget
		return obj
	}

}

class ResPacket_LinkWithAnother {
	public state?: string;
	public static fromJSON(json:any){
		let obj = new ResPacket_LinkWithAnother()
		obj.state = json.state
		return obj
	}

}

class ReqPacket_UnsealMails {
	public mailIds?: number[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_UnsealMails()
		obj.mailIds = json.mailIds
		return obj
	}

}

class ReqPacket_SaveMiniStoryWeek {
	public weekId?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_SaveMiniStoryWeek()
		obj.weekId = json.weekId
		return obj
	}

}

class ReqPacket_MirrorDungeonCommon {
	public isOrigin?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_MirrorDungeonCommon()
		obj.isOrigin = json.isOrigin
		return obj
	}

}

class ReqPacket_EnterMirrorDungeonCommand {
	public dungeonid?: number;
	public idx?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_EnterMirrorDungeonCommand()
		obj.dungeonid = json.dungeonid
		obj.idx = json.idx
		return obj
	}

}

class ReqPacket_ReEnterMirrorDungeonCommand {
	public dungeonid?: number;
	public idx?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_ReEnterMirrorDungeonCommand()
		obj.dungeonid = json.dungeonid
		obj.idx = json.idx
		return obj
	}

}

class ReqPacket_GetMirrorDungeonLastReward {
	public useEnkephalinModule?: number;
	public usehardbonus?: number;
	public useweeklybonus?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_GetMirrorDungeonLastReward()
		obj.useEnkephalinModule = json.useEnkephalinModule
		obj.usehardbonus = json.usehardbonus
		obj.useweeklybonus = json.useweeklybonus
		return obj
	}

}

class ReqPacket_AcquireEgoGiftEventMirrorDungeonCommand {
	public selectIndexList?: number[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_AcquireEgoGiftEventMirrorDungeonCommand()
		obj.selectIndexList = json.selectIndexList
		return obj
	}

}

class ReqPacket_GetMirrorDungeonEgoGiftRecordCommand {
	public dungeonId?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_GetMirrorDungeonEgoGiftRecordCommand()
		obj.dungeonId = json.dungeonId
		return obj
	}

}

class ResPacket_GetMirrorDungeonEgoGiftRecordCommand {
	public dungeonId?: number;
	public acquiredegogifts?: number[];
	public static fromJSON(json:any){
		let obj = new ResPacket_GetMirrorDungeonEgoGiftRecordCommand()
		obj.dungeonId = json.dungeonId
		obj.acquiredegogifts = json.acquiredegogifts
		return obj
	}

}

class ReqPacket_UnLockMirrorDungeonEgoGiftCommand {
	public egogiftIds?: number[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_UnLockMirrorDungeonEgoGiftCommand()
		obj.egogiftIds = json.egogiftIds
		return obj
	}

}

class ReqPacket_SendMirrorDungeonLogErrorCommand {
	public type?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_SendMirrorDungeonLogErrorCommand()
		obj.type = json.type
		return obj
	}

}

class ReqPacket_PurchaseMirrordungeonHeal {
	public idx?: number;
	public pid?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_PurchaseMirrordungeonHeal()
		obj.idx = json.idx
		obj.pid = json.pid
		return obj
	}

}

class ReqPacket_PurchaseUpgradePersonality {
	public idx?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_PurchaseUpgradePersonality()
		obj.idx = json.idx
		return obj
	}

}

class ReqPacket_PurchaseEgoGift {
	public idx?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_PurchaseEgoGift()
		obj.idx = json.idx
		return obj
	}

}

class ReqPacket_GetStartBuffFInfo {
	public dungeonid?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_GetStartBuffFInfo()
		obj.dungeonid = json.dungeonid
		return obj
	}

}

class ReqPacket_PurchaseStartBuff {
	public dungeonid?: number;
	public buffid?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_PurchaseStartBuff()
		obj.dungeonid = json.dungeonid
		obj.buffid = json.buffid
		return obj
	}

}

class ReqPacket_RemoveMirrorDungeonEgoGift {
	public egogiftId?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_RemoveMirrorDungeonEgoGift()
		obj.egogiftId = json.egogiftId
		return obj
	}

}

class ReqPacket_GetMirrorDungeonPreset {
	public dungeonid?: number;
	public idx?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_GetMirrorDungeonPreset()
		obj.dungeonid = json.dungeonid
		obj.idx = json.idx
		return obj
	}

}

class ResPacket_GetMirrorDungeonRewardChip {
	public chip?: number;
	public Chip?: number;
	public static fromJSON(json:any){
		let obj = new ResPacket_GetMirrorDungeonRewardChip()
		obj.chip = json.chip
		obj.Chip = json.Chip
		return obj
	}

}

class ReqPacket_SelectMirrorDungeonRandomPickFormation {
	public dungeonid?: number;
	public idx?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_SelectMirrorDungeonRandomPickFormation()
		obj.dungeonid = json.dungeonid
		obj.idx = json.idx
		return obj
	}

}

class ReqPacket_ReportError {
	public errorCode?: string;
	public url?: string;
	public requestJson?: string;
	public message?: string;
	public static fromJSON(json:any){
		let obj = new ReqPacket_ReportError()
		obj.errorCode = json.errorCode
		obj.url = json.url
		obj.requestJson = json.requestJson
		obj.message = json.message
		return obj
	}

}

class ReqPacket_CompleteTheaterStory {
	public storyId?: string;
	public static fromJSON(json:any){
		let obj = new ReqPacket_CompleteTheaterStory()
		obj.storyId = json.storyId
		return obj
	}

}

class ReqPacket_FindFriend {
	public publicUID?: string;
	public static fromJSON(json:any){
		let obj = new ReqPacket_FindFriend()
		obj.publicUID = json.publicUID
		return obj
	}

}

class ReqPacket_SendFriendRequest {
	public receiverPublicUID?: string;
	public static fromJSON(json:any){
		let obj = new ReqPacket_SendFriendRequest()
		obj.receiverPublicUID = json.receiverPublicUID
		return obj
	}

}

class ReqPacket_AcceptReceivedFriendRequest {
	public senderPublicUID?: string;
	public static fromJSON(json:any){
		let obj = new ReqPacket_AcceptReceivedFriendRequest()
		obj.senderPublicUID = json.senderPublicUID
		return obj
	}

}

class ResPacket_AcceptReceivedFriendRequest {
	public success?: number;
	public static fromJSON(json:any){
		let obj = new ResPacket_AcceptReceivedFriendRequest()
		obj.success = json.success
		return obj
	}

}

class ReqPacket_RejectReceivedFriendRequest {
	public senderPublicUID?: string;
	public static fromJSON(json:any){
		let obj = new ReqPacket_RejectReceivedFriendRequest()
		obj.senderPublicUID = json.senderPublicUID
		return obj
	}

}

class ReqPacket_CancelSentFriendRequest {
	public receivedPublicUID?: string;
	public static fromJSON(json:any){
		let obj = new ReqPacket_CancelSentFriendRequest()
		obj.receivedPublicUID = json.receivedPublicUID
		return obj
	}

}

class ReqPacket_DeleteFriend {
	public deletedPublicUID?: string;
	public static fromJSON(json:any){
		let obj = new ReqPacket_DeleteFriend()
		obj.deletedPublicUID = json.deletedPublicUID
		return obj
	}

}

class ReqPacket_GetFriendSupportPersonalities {
	public publicUID?: string;
	public static fromJSON(json:any){
		let obj = new ReqPacket_GetFriendSupportPersonalities()
		obj.publicUID = json.publicUID
		return obj
	}

}

class ReqPacket_GetFriendSupportPersonalitiesByCharacterId {
	public characterid?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_GetFriendSupportPersonalitiesByCharacterId()
		obj.characterid = json.characterid
		return obj
	}

}

class ReqPacket_UpdateProfileTicketDeco {
	public leftBorderId?: number;
	public rightBorderId?: number;
	public egoBackgroundId?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_UpdateProfileTicketDeco()
		obj.leftBorderId = json.leftBorderId
		obj.rightBorderId = json.rightBorderId
		obj.egoBackgroundId = json.egoBackgroundId
		return obj
	}

}

class ResPacket_UpdateProfileTicketDeco {
	public leftBorderId?: number;
	public rightBorderId?: number;
	public egoBackgroundId?: number;
	public static fromJSON(json:any){
		let obj = new ResPacket_UpdateProfileTicketDeco()
		obj.leftBorderId = json.leftBorderId
		obj.rightBorderId = json.rightBorderId
		obj.egoBackgroundId = json.egoBackgroundId
		return obj
	}

}

class ReqPacket_PlayVendingMachine {
	public vendingMachineId?: number;
	public targetType?: string;
	public targetId?: number;
	public coupons?: number[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_PlayVendingMachine()
		obj.vendingMachineId = json.vendingMachineId
		obj.targetType = json.targetType
		obj.targetId = json.targetId
		obj.coupons = json.coupons
		return obj
	}

}

class ReqPacket_EnterRailwayDungeonMapNodeCommand {
	public dungeonId?: number;
	public nodeid?: number;
	public abnormalityids?: number[];
	public participatedPIds?: number[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_EnterRailwayDungeonMapNodeCommand()
		obj.dungeonId = json.dungeonId
		obj.nodeid = json.nodeid
		obj.abnormalityids = json.abnormalityids
		obj.participatedPIds = json.participatedPIds
		return obj
	}

}

class ReqPacket_GetRailwayDungeonNodeAndLogAllCommand {
	public dungeonId?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_GetRailwayDungeonNodeAndLogAllCommand()
		obj.dungeonId = json.dungeonId
		return obj
	}

}

class ReqPacket_ExitRailwayDungeonCommand {
	public dungeonId?: number;
	public isClear?: boolean;
	public static fromJSON(json:any){
		let obj = new ReqPacket_ExitRailwayDungeonCommand()
		obj.dungeonId = json.dungeonId
		obj.isClear = json.isClear
		return obj
	}

}

class ReqPacket_AcquireRailwayDungeonReward {
	public dungeonId?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_AcquireRailwayDungeonReward()
		obj.dungeonId = json.dungeonId
		return obj
	}

}

class HellsChickenDungeonGetCharacterInfoContainGacksungFormat {
	public g?: number;
	public cl?: number;
	public static fromJSON(json:any){
		let obj = new HellsChickenDungeonGetCharacterInfoContainGacksungFormat()
		obj.g = json.g
		obj.cl = json.cl
		return obj
	}

}

class DungeonStatisticsDataFormat {
	public id?: number;
	public gd?: number;
	public rd?: number;
	public static fromJSON(json:any){
		let obj = new DungeonStatisticsDataFormat()
		obj.id = json.id
		obj.gd = json.gd
		obj.rd = json.rd
		return obj
	}

}

class StagePersonalityInfoFormat {
	public personalityid?: number;
	public prevlevel?: number;
	public totaladdexp?: number;
	public static fromJSON(json:any){
		let obj = new StagePersonalityInfoFormat()
		obj.personalityid = json.personalityid
		obj.prevlevel = json.prevlevel
		obj.totaladdexp = json.totaladdexp
		return obj
	}

}

class DungeonMapNodeFormat {
	public f?: number;
	public s?: number;
	public nid?: number;
	public static fromJSON(json:any){
		let obj = new DungeonMapNodeFormat()
		obj.f = json.f
		obj.s = json.s
		obj.nid = json.nid
		return obj
	}

}

class ReqPacket_EnterHellsChickenDungeonMapNodeCommand {
	public currentnode?: DungeonMapNodeFormat;
	public abnormalityids?: number[];
	public participatedPIds?: number[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_EnterHellsChickenDungeonMapNodeCommand()
		obj.currentnode = DungeonMapNodeFormat.fromJSON(json.currentnode)
		obj.abnormalityids = json.abnormalityids
		obj.participatedPIds = json.participatedPIds
		return obj
	}

}

class DungeonChoiceEventSaveDataFormat {
	public sl?: number[];
	public cs?: number;
	public ri?: number;
	public static fromJSON(json:any){
		let obj = new DungeonChoiceEventSaveDataFormat()
		obj.sl = json.sl
		obj.cs = json.cs
		obj.ri = json.ri
		return obj
	}

}

class HellsChickenDungeonSaveUnitInfoFormat {
	public grade?: number;
	public static fromJSON(json:any){
		let obj = new HellsChickenDungeonSaveUnitInfoFormat()
		obj.grade = json.grade
		return obj
	}

}

class DungeonMapEgoGiftFormat {
	public id?: number;
	public pids?: number[];
	public un?: number;
	public static fromJSON(json:any){
		let obj = new DungeonMapEgoGiftFormat()
		obj.id = json.id
		obj.pids = json.pids
		obj.un = json.un
		return obj
	}

}

class ReqPacket_EnterHellsChickendungeonMapNodeBattleAfterChoice {
	public participatedPids?: number[];
	public abnormalityids?: number[];
	public dungeonUnitList?: HellsChickenDungeonSaveUnitInfoFormat[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_EnterHellsChickendungeonMapNodeBattleAfterChoice()
		obj.participatedPids = json.participatedPids
		obj.abnormalityids = json.abnormalityids
		obj.dungeonUnitList = Object.values(json.dungeonUnitList).map(x=> HellsChickenDungeonSaveUnitInfoFormat.fromJSON(x))
		return obj
	}

}

class BattlePassParameterFormat {
	public enemyKillCount?: number;
	public abnormalityKillCount?: number;
	public isUsedDailyChar?: boolean;
	public isUsedSeasonEgo?: boolean;
	public isUsedSeasonAnnouncer?: boolean;
	public static fromJSON(json:any){
		let obj = new BattlePassParameterFormat()
		obj.enemyKillCount = json.enemyKillCount
		obj.abnormalityKillCount = json.abnormalityKillCount
		obj.isUsedDailyChar = json.isUsedDailyChar
		obj.isUsedSeasonEgo = json.isUsedSeasonEgo
		obj.isUsedSeasonAnnouncer = json.isUsedSeasonAnnouncer
		return obj
	}

}

class DungeonEgoSkillStockFormat {
	public t?: string;
	public n?: number;
	public static fromJSON(json:any){
		let obj = new DungeonEgoSkillStockFormat()
		obj.t = json.t
		obj.n = json.n
		return obj
	}

}

class ReqPacket_UpdateHellsChickendungeonUnits {
	public dungeonunitlist?: HellsChickenDungeonSaveUnitInfoFormat[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_UpdateHellsChickendungeonUnits()
		obj.dungeonunitlist = Object.values(json.dungeonunitlist).map(x=> HellsChickenDungeonSaveUnitInfoFormat.fromJSON(x))
		return obj
	}

}

class RandomDungeonEncounterRewardEventInfoFormat {
	public rt?: string;
	public se?: number;
	public sh?: number;
	public pool?: number[];
	public static fromJSON(json:any){
		let obj = new RandomDungeonEncounterRewardEventInfoFormat()
		obj.rt = json.rt
		obj.se = json.se
		obj.sh = json.sh
		obj.pool = json.pool
		return obj
	}

}

class ResPacket_AcquireCharacterEventDataHellsChickenDungeonCommand {
	public dungeonUnitList?: HellsChickenDungeonSaveUnitInfoFormat[];
	public remainRewardEvent?: RandomDungeonEncounterRewardEventInfoFormat[];
	public DungeonUnitList?: HellsChickenDungeonSaveUnitInfoFormat[];
	public RemainRewardEvent?: RandomDungeonEncounterRewardEventInfoFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_AcquireCharacterEventDataHellsChickenDungeonCommand()
		obj.dungeonUnitList = Object.values(json.dungeonUnitList).map(x=> HellsChickenDungeonSaveUnitInfoFormat.fromJSON(x))
		obj.remainRewardEvent = Object.values(json.remainRewardEvent).map(x=> RandomDungeonEncounterRewardEventInfoFormat.fromJSON(x))
		obj.DungeonUnitList = Object.values(json.DungeonUnitList).map(x=> HellsChickenDungeonSaveUnitInfoFormat.fromJSON(x))
		obj.RemainRewardEvent = Object.values(json.RemainRewardEvent).map(x=> RandomDungeonEncounterRewardEventInfoFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_PersonalityLevelUpEventHellsChickenDungeonCommand {
	public dungeonUnitList?: HellsChickenDungeonSaveUnitInfoFormat[];
	public remainRewardEvent?: RandomDungeonEncounterRewardEventInfoFormat[];
	public DungeonUnitList?: HellsChickenDungeonSaveUnitInfoFormat[];
	public RemainRewardEvent?: RandomDungeonEncounterRewardEventInfoFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_PersonalityLevelUpEventHellsChickenDungeonCommand()
		obj.dungeonUnitList = Object.values(json.dungeonUnitList).map(x=> HellsChickenDungeonSaveUnitInfoFormat.fromJSON(x))
		obj.remainRewardEvent = Object.values(json.remainRewardEvent).map(x=> RandomDungeonEncounterRewardEventInfoFormat.fromJSON(x))
		obj.DungeonUnitList = Object.values(json.DungeonUnitList).map(x=> HellsChickenDungeonSaveUnitInfoFormat.fromJSON(x))
		obj.RemainRewardEvent = Object.values(json.RemainRewardEvent).map(x=> RandomDungeonEncounterRewardEventInfoFormat.fromJSON(x))
		return obj
	}

}

class ReqPacket_ExitExpDungeon {
	public formationId?: number;
	public isWin?: number;
	public supportCharacterId?: number;
	public supportParticipate?: boolean;
	public battlePassParameters?: BattlePassParameterFormat;
	public static fromJSON(json:any){
		let obj = new ReqPacket_ExitExpDungeon()
		obj.formationId = json.formationId
		obj.isWin = json.isWin
		obj.supportCharacterId = json.supportCharacterId
		obj.supportParticipate = json.supportParticipate
		obj.battlePassParameters = BattlePassParameterFormat.fromJSON(json.battlePassParameters)
		return obj
	}

}

class ExpDungeonClearInfoFormat {
	public dungeonid?: number;
	public clearnumber?: number;
	public Dungeonid?: number;
	public Clearnumber?: number;
	public static fromJSON(json:any){
		let obj = new ExpDungeonClearInfoFormat()
		obj.dungeonid = json.dungeonid
		obj.clearnumber = json.clearnumber
		obj.Dungeonid = json.Dungeonid
		obj.Clearnumber = json.Clearnumber
		return obj
	}

}

class ThreadDungeonClearInfoFormat {
	public dungeonid?: number;
	public clearnumber?: number;
	public dungeonlevel?: number;
	public Dungeonid?: number;
	public Clearnumber?: number;
	public Dungeonlevel?: number;
	public static fromJSON(json:any){
		let obj = new ThreadDungeonClearInfoFormat()
		obj.dungeonid = json.dungeonid
		obj.clearnumber = json.clearnumber
		obj.dungeonlevel = json.dungeonlevel
		obj.Dungeonid = json.Dungeonid
		obj.Clearnumber = json.Clearnumber
		obj.Dungeonlevel = json.Dungeonlevel
		return obj
	}

}

class DailyLoginRewardStateFormat {
	public weekid?: number;
	public id?: number;
	public static fromJSON(json:any){
		let obj = new DailyLoginRewardStateFormat()
		obj.weekid = json.weekid
		obj.id = json.id
		return obj
	}

}

class MirrorDungeonClearInfoFormat {
	public dungeonid?: number;
	public idx?: number;
	public clearnumber?: number;
	public defeatnumber?: number;
	public static fromJSON(json:any){
		let obj = new MirrorDungeonClearInfoFormat()
		obj.dungeonid = json.dungeonid
		obj.idx = json.idx
		obj.clearnumber = json.clearnumber
		obj.defeatnumber = json.defeatnumber
		return obj
	}

}

class StoryDungeonSaveUnitInfoFormat {
	public sp?: number;
	public gi?: number;
	public static fromJSON(json:any){
		let obj = new StoryDungeonSaveUnitInfoFormat()
		obj.sp = json.sp
		obj.gi = json.gi
		return obj
	}

}

class ReqPacket_UpdateStoryDungeonMapNodeCommand {
	public choiceEventData?: DungeonChoiceEventSaveDataFormat;
	public dungeonUnitList?: StoryDungeonSaveUnitInfoFormat[];
	public updatedEgoGifts?: DungeonMapEgoGiftFormat[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_UpdateStoryDungeonMapNodeCommand()
		obj.choiceEventData = DungeonChoiceEventSaveDataFormat.fromJSON(json.choiceEventData)
		obj.dungeonUnitList = Object.values(json.dungeonUnitList).map(x=> StoryDungeonSaveUnitInfoFormat.fromJSON(x))
		obj.updatedEgoGifts = Object.values(json.updatedEgoGifts).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_UpdateStoryDungeonMapNodeCommand {
	public prevChoiceEvent?: DungeonChoiceEventSaveDataFormat[];
	public currentEgoGifts?: DungeonMapEgoGiftFormat[];
	public isAllDie?: number;
	public PrevChoiceEvent?: DungeonChoiceEventSaveDataFormat[];
	public CurrentEgoGifts?: DungeonMapEgoGiftFormat[];
	public IsAllDie?: number;
	public static fromJSON(json:any){
		let obj = new ResPacket_UpdateStoryDungeonMapNodeCommand()
		obj.prevChoiceEvent = Object.values(json.prevChoiceEvent).map(x=> DungeonChoiceEventSaveDataFormat.fromJSON(x))
		obj.currentEgoGifts = Object.values(json.currentEgoGifts).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		obj.isAllDie = json.isAllDie
		obj.PrevChoiceEvent = Object.values(json.PrevChoiceEvent).map(x=> DungeonChoiceEventSaveDataFormat.fromJSON(x))
		obj.CurrentEgoGifts = Object.values(json.CurrentEgoGifts).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		obj.IsAllDie = json.IsAllDie
		return obj
	}

}

class ReqPacket_EnterStoryDungeonMapNodeBattleAfterChoice {
	public dungeonUnitList?: StoryDungeonSaveUnitInfoFormat[];
	public participatedPids?: number[];
	public abnormalityids?: number[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_EnterStoryDungeonMapNodeBattleAfterChoice()
		obj.dungeonUnitList = Object.values(json.dungeonUnitList).map(x=> StoryDungeonSaveUnitInfoFormat.fromJSON(x))
		obj.participatedPids = json.participatedPids
		obj.abnormalityids = json.abnormalityids
		return obj
	}

}

class ReqPacket_UpdateStoryDungeonUnits {
	public dungeonunitlist?: StoryDungeonSaveUnitInfoFormat[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_UpdateStoryDungeonUnits()
		obj.dungeonunitlist = Object.values(json.dungeonunitlist).map(x=> StoryDungeonSaveUnitInfoFormat.fromJSON(x))
		return obj
	}

}

class StoryDungeonCurrentInfoFormat {
	public dul?: StoryDungeonSaveUnitInfoFormat[];
	public scpn?: DungeonMapNodeFormat;
	public scpegl?: DungeonMapEgoGiftFormat[];
	public opn?: number[];
	public static fromJSON(json:any){
		let obj = new StoryDungeonCurrentInfoFormat()
		obj.dul = Object.values(json.dul).map(x=> StoryDungeonSaveUnitInfoFormat.fromJSON(x))
		obj.scpn = DungeonMapNodeFormat.fromJSON(json.scpn)
		obj.scpegl = Object.values(json.scpegl).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		obj.opn = json.opn
		return obj
	}

}

class ResPacket_ReturnSavePointStoryDungeonMap {
	public currentInfo?: StoryDungeonCurrentInfoFormat;
	public CurrentInfo?: StoryDungeonCurrentInfoFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_ReturnSavePointStoryDungeonMap()
		obj.currentInfo = StoryDungeonCurrentInfoFormat.fromJSON(json.currentInfo)
		obj.CurrentInfo = StoryDungeonCurrentInfoFormat.fromJSON(json.CurrentInfo)
		return obj
	}

}

class ResPacket_ExitStoryDungeonMapNodeByForcely {
	public currentInfo?: StoryDungeonCurrentInfoFormat;
	public isAllDie?: number;
	public CurrentInfo?: StoryDungeonCurrentInfoFormat;
	public IsAllDie?: number;
	public static fromJSON(json:any){
		let obj = new ResPacket_ExitStoryDungeonMapNodeByForcely()
		obj.currentInfo = StoryDungeonCurrentInfoFormat.fromJSON(json.currentInfo)
		obj.isAllDie = json.isAllDie
		obj.CurrentInfo = StoryDungeonCurrentInfoFormat.fromJSON(json.CurrentInfo)
		obj.IsAllDie = json.IsAllDie
		return obj
	}

}

class PityPoint {
	public gachaID?: number;
	public pityNumber?: number;
	public static fromJSON(json:any){
		let obj = new PityPoint()
		obj.gachaID = json.gachaID
		obj.pityNumber = json.pityNumber
		return obj
	}

}

class ItemFormat {
	public item_id?: number;
	public num?: number;
	public static fromJSON(json:any){
		let obj = new ItemFormat()
		obj.item_id = json.item_id
		obj.num = json.num
		return obj
	}

}

class PersonalityFormat {
	public personality_id?: number;
	public level?: number;
	public exp?: number;
	public gacksung?: number;
	public order_id?: number;
	public gacksung_illust_type?: number;
	public acquire_time?: string;
	public static fromJSON(json:any){
		let obj = new PersonalityFormat()
		obj.personality_id = json.personality_id
		obj.level = json.level
		obj.exp = json.exp
		obj.gacksung = json.gacksung
		obj.order_id = json.order_id
		obj.gacksung_illust_type = json.gacksung_illust_type
		obj.acquire_time = json.acquire_time
		return obj
	}

}

class ResPacket_UsePersonalityExpItem {
	public resultPersonality?: PersonalityFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_UsePersonalityExpItem()
		obj.resultPersonality = PersonalityFormat.fromJSON(json.resultPersonality)
		return obj
	}

}

class UserAuthFormat {
	public uid?: number;
	public public_id?: number;
	public db_id?: number;
	public auth_code?: string;
	public last_login_date?: string;
	public last_update_date?: string;
	public data_version?: number;
	public static fromJSON(json:any){
		let obj = new UserAuthFormat()
		obj.uid = json.uid
		obj.public_id = json.public_id
		obj.db_id = json.db_id
		obj.auth_code = json.auth_code
		obj.last_login_date = json.last_login_date
		obj.last_update_date = json.last_update_date
		obj.data_version = json.data_version
		return obj
	}

}

class ResPacket_SignInAsGuest {
	public userAuth?: UserAuthFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_SignInAsGuest()
		obj.userAuth = UserAuthFormat.fromJSON(json.userAuth)
		return obj
	}

}

class ResPacket_SignInAsNewGuest {
	public userAuth?: UserAuthFormat;
	public authToken?: string;
	public static fromJSON(json:any){
		let obj = new ResPacket_SignInAsNewGuest()
		obj.userAuth = UserAuthFormat.fromJSON(json.userAuth)
		obj.authToken = json.authToken
		return obj
	}

}

class AccountInfoFormat {
	public uid?: number;
	public google_account?: string;
	public apple_account?: string;
	public steam_account?: string;
	public static fromJSON(json:any){
		let obj = new AccountInfoFormat()
		obj.uid = json.uid
		obj.google_account = json.google_account
		obj.apple_account = json.apple_account
		obj.steam_account = json.steam_account
		return obj
	}

}

class ResPacket_SignInAsGoogle {
	public userAuth?: UserAuthFormat;
	public accountInfo?: AccountInfoFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_SignInAsGoogle()
		obj.userAuth = UserAuthFormat.fromJSON(json.userAuth)
		obj.accountInfo = AccountInfoFormat.fromJSON(json.accountInfo)
		return obj
	}

}

class ResPacket_LinkWithGoogle {
	public userAuth?: UserAuthFormat;
	public accountInfo?: AccountInfoFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_LinkWithGoogle()
		obj.userAuth = UserAuthFormat.fromJSON(json.userAuth)
		obj.accountInfo = AccountInfoFormat.fromJSON(json.accountInfo)
		return obj
	}

}

class ResPacket_SignInAsApple {
	public userAuth?: UserAuthFormat;
	public accountInfo?: AccountInfoFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_SignInAsApple()
		obj.userAuth = UserAuthFormat.fromJSON(json.userAuth)
		obj.accountInfo = AccountInfoFormat.fromJSON(json.accountInfo)
		return obj
	}

}

class ResPacket_LinkWithApple {
	public userAuth?: UserAuthFormat;
	public accountInfo?: AccountInfoFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_LinkWithApple()
		obj.userAuth = UserAuthFormat.fromJSON(json.userAuth)
		obj.accountInfo = AccountInfoFormat.fromJSON(json.accountInfo)
		return obj
	}

}

class ResPacket_SignInAsSteam {
	public userAuth?: UserAuthFormat;
	public accountInfo?: AccountInfoFormat;
	public walletCurrency?: string;
	public static fromJSON(json:any){
		let obj = new ResPacket_SignInAsSteam()
		obj.userAuth = UserAuthFormat.fromJSON(json.userAuth)
		obj.accountInfo = AccountInfoFormat.fromJSON(json.accountInfo)
		obj.walletCurrency = json.walletCurrency
		return obj
	}

}

class LinkAuthFormat {
	public public_id?: number;
	public password?: string;
	public expiry_date?: string;
	public details?: string;
	public static fromJSON(json:any){
		let obj = new LinkAuthFormat()
		obj.public_id = json.public_id
		obj.password = json.password
		obj.expiry_date = json.expiry_date
		obj.details = json.details
		return obj
	}

}

class ResPacket_RefreshLinkAuth {
	public linkAuth?: LinkAuthFormat;
	public state?: string;
	public static fromJSON(json:any){
		let obj = new ResPacket_RefreshLinkAuth()
		obj.linkAuth = LinkAuthFormat.fromJSON(json.linkAuth)
		obj.state = json.state
		return obj
	}

}

class ResPacket_TryToSecede {
	public secessionDate?: string;
	public static fromJSON(json:any){
		let obj = new ResPacket_TryToSecede()
		obj.secessionDate = json.secessionDate
		return obj
	}

}

class ResPacket_ExitMirrorDungeonCommand {
	public isEndDungeon?: number;
	public isclear?: number;
	public acquiredChip?: number;
	public statistics?: DungeonStatisticsDataFormat[];
	public IsClear?: boolean;
	public Statistics?: DungeonStatisticsDataFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_ExitMirrorDungeonCommand()
		obj.isEndDungeon = json.isEndDungeon
		obj.isclear = json.isclear
		obj.acquiredChip = json.acquiredChip
		obj.statistics = Object.values(json.statistics).map(x=> DungeonStatisticsDataFormat.fromJSON(x))
		obj.IsClear = json.IsClear
		obj.Statistics = Object.values(json.Statistics).map(x=> DungeonStatisticsDataFormat.fromJSON(x))
		return obj
	}

}

class ReqPacket_EnterMirrorDungeonMapNodeCommand {
	public currentnode?: DungeonMapNodeFormat;
	public abnormalityids?: number[];
	public participatedPIds?: number[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_EnterMirrorDungeonMapNodeCommand()
		obj.currentnode = DungeonMapNodeFormat.fromJSON(json.currentnode)
		obj.abnormalityids = json.abnormalityids
		obj.participatedPIds = json.participatedPIds
		return obj
	}

}

class UserMirrorDungeonShopDataFormat {
	public ph?: number;
	public pup?: number;
	public upid?: number;
	public peg?: number;
	public pcf?: number;
	public pabu?: number;
	public pueg?: number;
	public egpool?: number[];
	public static fromJSON(json:any){
		let obj = new UserMirrorDungeonShopDataFormat()
		obj.ph = json.ph
		obj.pup = json.pup
		obj.upid = json.upid
		obj.peg = json.peg
		obj.pcf = json.pcf
		obj.pabu = json.pabu
		obj.pueg = json.pueg
		obj.egpool = json.egpool
		return obj
	}

}

class MirrorDungeonPrevUnitInfoFormat {
	public pid?: number;
	public ch?: number;
	public cm?: number;
	public upidx?: number[];
	public static fromJSON(json:any){
		let obj = new MirrorDungeonPrevUnitInfoFormat()
		obj.pid = json.pid
		obj.ch = json.ch
		obj.cm = json.cm
		obj.upidx = json.upidx
		return obj
	}

}

class MirrorDungeonSaveUnitInfoFormat {
	public upidx?: number[];
	public static fromJSON(json:any){
		let obj = new MirrorDungeonSaveUnitInfoFormat()
		obj.upidx = json.upidx
		return obj
	}

}

class ResPacket_UpdateMirrorDungeonMapNodeCommand {
	public prevChoiceEvent?: DungeonChoiceEventSaveDataFormat[];
	public currentEgoGifts?: DungeonMapEgoGiftFormat[];
	public PrevChoiceEvent?: DungeonChoiceEventSaveDataFormat[];
	public CurrentEgoGifts?: DungeonMapEgoGiftFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_UpdateMirrorDungeonMapNodeCommand()
		obj.prevChoiceEvent = Object.values(json.prevChoiceEvent).map(x=> DungeonChoiceEventSaveDataFormat.fromJSON(x))
		obj.currentEgoGifts = Object.values(json.currentEgoGifts).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		obj.PrevChoiceEvent = Object.values(json.PrevChoiceEvent).map(x=> DungeonChoiceEventSaveDataFormat.fromJSON(x))
		obj.CurrentEgoGifts = Object.values(json.CurrentEgoGifts).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		return obj
	}

}

class ReqPacket_EnterMirrordungeonMapNodeBattleAfterChoice {
	public participatedPids?: number[];
	public abnormalityids?: number[];
	public dungeonUnitList?: MirrorDungeonSaveUnitInfoFormat[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_EnterMirrordungeonMapNodeBattleAfterChoice()
		obj.participatedPids = json.participatedPids
		obj.abnormalityids = json.abnormalityids
		obj.dungeonUnitList = Object.values(json.dungeonUnitList).map(x=> MirrorDungeonSaveUnitInfoFormat.fromJSON(x))
		return obj
	}

}

class MirrorDungeonCurrentInfoFormat {
	public eid?: number;
	public dul?: MirrorDungeonSaveUnitInfoFormat[];
	public rre?: RandomDungeonEncounterRewardEventInfoFormat[];
	public ri?: number;
	public cost?: number;
	public shop?: UserMirrorDungeonShopDataFormat;
	public prevdul?: MirrorDungeonPrevUnitInfoFormat[];
	public preves?: number[];
	public static fromJSON(json:any){
		let obj = new MirrorDungeonCurrentInfoFormat()
		obj.eid = json.eid
		obj.dul = Object.values(json.dul).map(x=> MirrorDungeonSaveUnitInfoFormat.fromJSON(x))
		obj.rre = Object.values(json.rre).map(x=> RandomDungeonEncounterRewardEventInfoFormat.fromJSON(x))
		obj.ri = json.ri
		obj.cost = json.cost
		obj.shop = UserMirrorDungeonShopDataFormat.fromJSON(json.shop)
		obj.prevdul = Object.values(json.prevdul).map(x=> MirrorDungeonPrevUnitInfoFormat.fromJSON(x))
		obj.preves = json.preves
		return obj
	}

}

class ReqPacket_UpdateMirrordungeonUnits {
	public dungeonunitlist?: MirrorDungeonSaveUnitInfoFormat[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_UpdateMirrordungeonUnits()
		obj.dungeonunitlist = Object.values(json.dungeonunitlist).map(x=> MirrorDungeonSaveUnitInfoFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_ExitMirrorDungeonMapNodeByForcely {
	public currentInfo?: MirrorDungeonCurrentInfoFormat;
	public CurrentInfo?: MirrorDungeonCurrentInfoFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_ExitMirrorDungeonMapNodeByForcely()
		obj.currentInfo = MirrorDungeonCurrentInfoFormat.fromJSON(json.currentInfo)
		obj.CurrentInfo = MirrorDungeonCurrentInfoFormat.fromJSON(json.CurrentInfo)
		return obj
	}

}

class ResPacket_AcquireEgoGiftEventMirrorDungeonCommand {
	public egoGifts?: DungeonMapEgoGiftFormat[];
	public remainRewardEvent?: RandomDungeonEncounterRewardEventInfoFormat[];
	public EgoGifts?: DungeonMapEgoGiftFormat[];
	public RemainRewardEvent?: RandomDungeonEncounterRewardEventInfoFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_AcquireEgoGiftEventMirrorDungeonCommand()
		obj.egoGifts = Object.values(json.egoGifts).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		obj.remainRewardEvent = Object.values(json.remainRewardEvent).map(x=> RandomDungeonEncounterRewardEventInfoFormat.fromJSON(x))
		obj.EgoGifts = Object.values(json.EgoGifts).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		obj.RemainRewardEvent = Object.values(json.RemainRewardEvent).map(x=> RandomDungeonEncounterRewardEventInfoFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_RejectRewardEgoGiftsMirrorDungeonCommand {
	public remainRewardEvent?: RandomDungeonEncounterRewardEventInfoFormat[];
	public RemainRewardEvent?: RandomDungeonEncounterRewardEventInfoFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_RejectRewardEgoGiftsMirrorDungeonCommand()
		obj.remainRewardEvent = Object.values(json.remainRewardEvent).map(x=> RandomDungeonEncounterRewardEventInfoFormat.fromJSON(x))
		obj.RemainRewardEvent = Object.values(json.RemainRewardEvent).map(x=> RandomDungeonEncounterRewardEventInfoFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_AcquireCharacterEventDataMirrorDungeonCommand {
	public dungeonUnitList?: MirrorDungeonSaveUnitInfoFormat[];
	public remainRewardEvent?: RandomDungeonEncounterRewardEventInfoFormat[];
	public DungeonUnitList?: MirrorDungeonSaveUnitInfoFormat[];
	public RemainRewardEvent?: RandomDungeonEncounterRewardEventInfoFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_AcquireCharacterEventDataMirrorDungeonCommand()
		obj.dungeonUnitList = Object.values(json.dungeonUnitList).map(x=> MirrorDungeonSaveUnitInfoFormat.fromJSON(x))
		obj.remainRewardEvent = Object.values(json.remainRewardEvent).map(x=> RandomDungeonEncounterRewardEventInfoFormat.fromJSON(x))
		obj.DungeonUnitList = Object.values(json.DungeonUnitList).map(x=> MirrorDungeonSaveUnitInfoFormat.fromJSON(x))
		obj.RemainRewardEvent = Object.values(json.RemainRewardEvent).map(x=> RandomDungeonEncounterRewardEventInfoFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_PersonalityLevelUpEventMirrorDungeonCommand {
	public dungeonUnitList?: MirrorDungeonSaveUnitInfoFormat[];
	public remainRewardEvent?: RandomDungeonEncounterRewardEventInfoFormat[];
	public DungeonUnitList?: MirrorDungeonSaveUnitInfoFormat[];
	public RemainRewardEvent?: RandomDungeonEncounterRewardEventInfoFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_PersonalityLevelUpEventMirrorDungeonCommand()
		obj.dungeonUnitList = Object.values(json.dungeonUnitList).map(x=> MirrorDungeonSaveUnitInfoFormat.fromJSON(x))
		obj.remainRewardEvent = Object.values(json.remainRewardEvent).map(x=> RandomDungeonEncounterRewardEventInfoFormat.fromJSON(x))
		obj.DungeonUnitList = Object.values(json.DungeonUnitList).map(x=> MirrorDungeonSaveUnitInfoFormat.fromJSON(x))
		obj.RemainRewardEvent = Object.values(json.RemainRewardEvent).map(x=> RandomDungeonEncounterRewardEventInfoFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_PurchaseMirrordungeonHeal {
	public cost?: number;
	public dungeonUnitList?: MirrorDungeonSaveUnitInfoFormat[];
	public shopInfo?: UserMirrorDungeonShopDataFormat;
	public Cost?: number;
	public DungeonUnitList?: MirrorDungeonSaveUnitInfoFormat[];
	public ShopInfo?: UserMirrorDungeonShopDataFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_PurchaseMirrordungeonHeal()
		obj.cost = json.cost
		obj.dungeonUnitList = Object.values(json.dungeonUnitList).map(x=> MirrorDungeonSaveUnitInfoFormat.fromJSON(x))
		obj.shopInfo = UserMirrorDungeonShopDataFormat.fromJSON(json.shopInfo)
		obj.Cost = json.Cost
		obj.DungeonUnitList = Object.values(json.DungeonUnitList).map(x=> MirrorDungeonSaveUnitInfoFormat.fromJSON(x))
		obj.ShopInfo = UserMirrorDungeonShopDataFormat.fromJSON(json.ShopInfo)
		return obj
	}

}

class ResPacket_PurchaseFormation {
	public cost?: number;
	public dungeonUnitList?: MirrorDungeonSaveUnitInfoFormat[];
	public shopInfo?: UserMirrorDungeonShopDataFormat;
	public Cost?: number;
	public DungeonUnitList?: MirrorDungeonSaveUnitInfoFormat[];
	public ShopInfo?: UserMirrorDungeonShopDataFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_PurchaseFormation()
		obj.cost = json.cost
		obj.dungeonUnitList = Object.values(json.dungeonUnitList).map(x=> MirrorDungeonSaveUnitInfoFormat.fromJSON(x))
		obj.shopInfo = UserMirrorDungeonShopDataFormat.fromJSON(json.shopInfo)
		obj.Cost = json.Cost
		obj.DungeonUnitList = Object.values(json.DungeonUnitList).map(x=> MirrorDungeonSaveUnitInfoFormat.fromJSON(x))
		obj.ShopInfo = UserMirrorDungeonShopDataFormat.fromJSON(json.ShopInfo)
		return obj
	}

}

class ResPacket_PurchaseUpgradePersonality {
	public cost?: number;
	public dungeonUnitList?: MirrorDungeonSaveUnitInfoFormat[];
	public shopInfo?: UserMirrorDungeonShopDataFormat;
	public Cost?: number;
	public DungeonUnitList?: MirrorDungeonSaveUnitInfoFormat[];
	public ShopInfo?: UserMirrorDungeonShopDataFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_PurchaseUpgradePersonality()
		obj.cost = json.cost
		obj.dungeonUnitList = Object.values(json.dungeonUnitList).map(x=> MirrorDungeonSaveUnitInfoFormat.fromJSON(x))
		obj.shopInfo = UserMirrorDungeonShopDataFormat.fromJSON(json.shopInfo)
		obj.Cost = json.Cost
		obj.DungeonUnitList = Object.values(json.DungeonUnitList).map(x=> MirrorDungeonSaveUnitInfoFormat.fromJSON(x))
		obj.ShopInfo = UserMirrorDungeonShopDataFormat.fromJSON(json.ShopInfo)
		return obj
	}

}

class ResPacket_PurchaseEgoGift {
	public cost?: number;
	public egogifts?: DungeonMapEgoGiftFormat[];
	public shopInfo?: UserMirrorDungeonShopDataFormat;
	public Cost?: number;
	public Egogifts?: DungeonMapEgoGiftFormat[];
	public ShopInfo?: UserMirrorDungeonShopDataFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_PurchaseEgoGift()
		obj.cost = json.cost
		obj.egogifts = Object.values(json.egogifts).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		obj.shopInfo = UserMirrorDungeonShopDataFormat.fromJSON(json.shopInfo)
		obj.Cost = json.Cost
		obj.Egogifts = Object.values(json.Egogifts).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		obj.ShopInfo = UserMirrorDungeonShopDataFormat.fromJSON(json.ShopInfo)
		return obj
	}

}

class MirrorDungeonStartBuffInfoFormat {
	public dungeonid?: number;
	public bufstate?: number[];
	public chip?: number;
	public static fromJSON(json:any){
		let obj = new MirrorDungeonStartBuffInfoFormat()
		obj.dungeonid = json.dungeonid
		obj.bufstate = json.bufstate
		obj.chip = json.chip
		return obj
	}

}

class ResPacket_GetStartBuffFInfo {
	public startBuffInfo?: MirrorDungeonStartBuffInfoFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_GetStartBuffFInfo()
		obj.startBuffInfo = MirrorDungeonStartBuffInfoFormat.fromJSON(json.startBuffInfo)
		return obj
	}

}

class ResPacket_PurchaseStartBuff {
	public startBuffInfo?: MirrorDungeonStartBuffInfoFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_PurchaseStartBuff()
		obj.startBuffInfo = MirrorDungeonStartBuffInfoFormat.fromJSON(json.startBuffInfo)
		return obj
	}

}

class ResPacket_RemoveMirrorDungeonEgoGift {
	public egs?: DungeonMapEgoGiftFormat[];
	public EgoGifts?: DungeonMapEgoGiftFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_RemoveMirrorDungeonEgoGift()
		obj.egs = Object.values(json.egs).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		obj.EgoGifts = Object.values(json.EgoGifts).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_MirrorDungeonGiveUpSelectingEgoGift {
	public remainRewardEvent?: RandomDungeonEncounterRewardEventInfoFormat[];
	public RemainRewardEvent?: RandomDungeonEncounterRewardEventInfoFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_MirrorDungeonGiveUpSelectingEgoGift()
		obj.remainRewardEvent = Object.values(json.remainRewardEvent).map(x=> RandomDungeonEncounterRewardEventInfoFormat.fromJSON(x))
		obj.RemainRewardEvent = Object.values(json.RemainRewardEvent).map(x=> RandomDungeonEncounterRewardEventInfoFormat.fromJSON(x))
		return obj
	}

}

class UserTheaterInfoFormat {
	public rewardedIDList?: string[];
	public static fromJSON(json:any){
		let obj = new UserTheaterInfoFormat()
		obj.rewardedIDList = json.rewardedIDList
		return obj
	}

}

class ResPacket_GetTheaterInfo {
	public theaterInfo?: UserTheaterInfoFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_GetTheaterInfo()
		obj.theaterInfo = UserTheaterInfoFormat.fromJSON(json.theaterInfo)
		return obj
	}

}

class ResPacket_CompleteTheaterStory {
	public isRewarded?: boolean;
	public theaterInfo?: UserTheaterInfoFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_CompleteTheaterStory()
		obj.isRewarded = json.isRewarded
		obj.theaterInfo = UserTheaterInfoFormat.fromJSON(json.theaterInfo)
		return obj
	}

}

class UserBannerDataFormat {
	public id?: number;
	public acquiretime?: string;
	public value?: number;
	public static fromJSON(json:any){
		let obj = new UserBannerDataFormat()
		obj.id = json.id
		obj.acquiretime = json.acquiretime
		obj.value = json.value
		return obj
	}

}

class SupportPersonalitySlotFormat {
	public idx?: number;
	public static fromJSON(json:any){
		let obj = new SupportPersonalitySlotFormat()
		obj.idx = json.idx
		return obj
	}

}

class UserPublicBannerFormat {
	public id?: number;
	public value?: number;
	public idx?: number;
	public static fromJSON(json:any){
		let obj = new UserPublicBannerFormat()
		obj.id = json.id
		obj.value = json.value
		obj.idx = json.idx
		return obj
	}

}

class UserProfileBorderFormat {
	public id?: number;
	public date?: string;
	public static fromJSON(json:any){
		let obj = new UserProfileBorderFormat()
		obj.id = json.id
		obj.date = json.date
		return obj
	}

}

class UserProfileEgobackgroundFormat {
	public id?: number;
	public date?: string;
	public static fromJSON(json:any){
		let obj = new UserProfileEgobackgroundFormat()
		obj.id = json.id
		obj.date = json.date
		return obj
	}

}

class ResPacket_PlayVendingMachine {
	public itemConsumptions?: ItemFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_PlayVendingMachine()
		obj.itemConsumptions = Object.values(json.itemConsumptions).map(x=> ItemFormat.fromJSON(x))
		return obj
	}

}

class ReqPacket_ExchangeTwine {
	public paidPieces?: ItemFormat[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_ExchangeTwine()
		obj.paidPieces = Object.values(json.paidPieces).map(x=> ItemFormat.fromJSON(x))
		return obj
	}

}

class RailwayUnitStatusFormat {
	public pid?: number;
	public hp?: number;
	public mp?: number;
	public isp?: number;
	public IsParticipated?: boolean;
	public static fromJSON(json:any){
		let obj = new RailwayUnitStatusFormat()
		obj.pid = json.pid
		obj.hp = json.hp
		obj.mp = json.mp
		obj.isp = json.isp
		obj.IsParticipated = json.IsParticipated
		return obj
	}

}

class RailwayEGOStockFormat {
	public t?: string;
	public n?: number;
	public static fromJSON(json:any){
		let obj = new RailwayEGOStockFormat()
		obj.t = json.t
		obj.n = json.n
		return obj
	}

}

class RailwayStatisticsDataFormat {
	public id?: number;
	public gd?: number;
	public rd?: number;
	public static fromJSON(json:any){
		let obj = new RailwayStatisticsDataFormat()
		obj.id = json.id
		obj.gd = json.gd
		obj.rd = json.rd
		return obj
	}

}

class DungeonEgoFormat {
	public id?: number;
	public g?: number;
	public idx?: number;
	public static fromJSON(json:any){
		let obj = new DungeonEgoFormat()
		obj.id = json.id
		obj.g = json.g
		obj.idx = json.idx
		return obj
	}

}

class RandomDungeonMapNodeFormatForMapFormat {
	public f?: number;
	public s?: number;
	public nid?: number;
	public e?: number;
	public eid?: number;
	public nnids?: number[];
	public static fromJSON(json:any){
		let obj = new RandomDungeonMapNodeFormatForMapFormat()
		obj.f = json.f
		obj.s = json.s
		obj.nid = json.nid
		obj.e = json.e
		obj.eid = json.eid
		obj.nnids = json.nnids
		return obj
	}

}

class Element {
	public type?: string;
	public _type?: ELEMENT_TYPE;
	public id?: number;
	public num?: number;
	public Type?: ELEMENT_TYPE;
	public Id?: number;
	public Num?: number;
	public static fromJSON(json:any){
		let obj = new Element()
		obj.type = json.type
		obj._type = json._type
		obj.id = json.id
		obj.num = json.num
		obj.Type = json.Type
		obj.Id = json.Id
		obj.Num = json.Num
		return obj
	}

}

class PartResistFormat {
	public id?: number;
	public atrr?: number[];
	public atkr?: number[];
	public static fromJSON(json:any){
		let obj = new PartResistFormat()
		obj.id = json.id
		obj.atrr = json.atrr
		obj.atkr = json.atkr
		return obj
	}

}

class ReqPacket_UpdateHellsChickenDungeonMapNodeCommand {
	public choiceEventData?: DungeonChoiceEventSaveDataFormat;
	public dungeonUnitList?: HellsChickenDungeonSaveUnitInfoFormat[];
	public updatedEgoGifts?: DungeonMapEgoGiftFormat[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_UpdateHellsChickenDungeonMapNodeCommand()
		obj.choiceEventData = DungeonChoiceEventSaveDataFormat.fromJSON(json.choiceEventData)
		obj.dungeonUnitList = Object.values(json.dungeonUnitList).map(x=> HellsChickenDungeonSaveUnitInfoFormat.fromJSON(x))
		obj.updatedEgoGifts = Object.values(json.updatedEgoGifts).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_UpdateHellsChickenDungeonMapNodeCommand {
	public prevChoiceEvent?: DungeonChoiceEventSaveDataFormat[];
	public currentEgoGifts?: DungeonMapEgoGiftFormat[];
	public PrevChoiceEvent?: DungeonChoiceEventSaveDataFormat[];
	public CurrentEgoGifts?: DungeonMapEgoGiftFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_UpdateHellsChickenDungeonMapNodeCommand()
		obj.prevChoiceEvent = Object.values(json.prevChoiceEvent).map(x=> DungeonChoiceEventSaveDataFormat.fromJSON(x))
		obj.currentEgoGifts = Object.values(json.currentEgoGifts).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		obj.PrevChoiceEvent = Object.values(json.PrevChoiceEvent).map(x=> DungeonChoiceEventSaveDataFormat.fromJSON(x))
		obj.CurrentEgoGifts = Object.values(json.CurrentEgoGifts).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		return obj
	}

}

class HellsChickenDungeonCurrentInfoFormat {
	public cn?: DungeonMapNodeFormat;
	public egs?: DungeonMapEgoGiftFormat[];
	public pnids?: number[];
	public nr?: number;
	public pce?: DungeonChoiceEventSaveDataFormat[];
	public ess?: DungeonEgoSkillStockFormat[];
	public eid?: number;
	public dul?: HellsChickenDungeonSaveUnitInfoFormat[];
	public rre?: RandomDungeonEncounterRewardEventInfoFormat[];
	public static fromJSON(json:any){
		let obj = new HellsChickenDungeonCurrentInfoFormat()
		obj.cn = DungeonMapNodeFormat.fromJSON(json.cn)
		obj.egs = Object.values(json.egs).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		obj.pnids = json.pnids
		obj.nr = json.nr
		obj.pce = Object.values(json.pce).map(x=> DungeonChoiceEventSaveDataFormat.fromJSON(x))
		obj.ess = Object.values(json.ess).map(x=> DungeonEgoSkillStockFormat.fromJSON(x))
		obj.eid = json.eid
		obj.dul = Object.values(json.dul).map(x=> HellsChickenDungeonSaveUnitInfoFormat.fromJSON(x))
		obj.rre = Object.values(json.rre).map(x=> RandomDungeonEncounterRewardEventInfoFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_AcquireEgoGiftEventHellsChickenDungeonCommand {
	public egoGifts?: DungeonMapEgoGiftFormat[];
	public remainRewardEvent?: RandomDungeonEncounterRewardEventInfoFormat[];
	public EgoGifts?: DungeonMapEgoGiftFormat[];
	public RemainRewardEvent?: RandomDungeonEncounterRewardEventInfoFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_AcquireEgoGiftEventHellsChickenDungeonCommand()
		obj.egoGifts = Object.values(json.egoGifts).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		obj.remainRewardEvent = Object.values(json.remainRewardEvent).map(x=> RandomDungeonEncounterRewardEventInfoFormat.fromJSON(x))
		obj.EgoGifts = Object.values(json.EgoGifts).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		obj.RemainRewardEvent = Object.values(json.RemainRewardEvent).map(x=> RandomDungeonEncounterRewardEventInfoFormat.fromJSON(x))
		return obj
	}

}

class HellsChickenDungeonLevelUpPersonalityInfoFormat {
	public pid?: number;
	public egos?: DungeonEgoFormat[];
	public static fromJSON(json:any){
		let obj = new HellsChickenDungeonLevelUpPersonalityInfoFormat()
		obj.pid = json.pid
		obj.egos = Object.values(json.egos).map(x=> DungeonEgoFormat.fromJSON(x))
		return obj
	}

}

class ReqPacket_PersonalityLevelUpEventHellsChickenDungeonCommand {
	public levelUpPersonalityFormat?: HellsChickenDungeonLevelUpPersonalityInfoFormat;
	public static fromJSON(json:any){
		let obj = new ReqPacket_PersonalityLevelUpEventHellsChickenDungeonCommand()
		obj.levelUpPersonalityFormat = HellsChickenDungeonLevelUpPersonalityInfoFormat.fromJSON(json.levelUpPersonalityFormat)
		return obj
	}

}

class ResPacket_AcquireHellsChickenReward {
	public rewardState?: number[];
	public rewards?: Element[];
	public static fromJSON(json:any){
		let obj = new ResPacket_AcquireHellsChickenReward()
		obj.rewardState = json.rewardState
		obj.rewards = Object.values(json.rewards).map(x=> Element.fromJSON(x))
		return obj
	}

}

class ResPacket_AcquireAttendanceReward {
	public rewardState?: number[];
	public rewards?: Element[];
	public static fromJSON(json:any){
		let obj = new ResPacket_AcquireAttendanceReward()
		obj.rewardState = json.rewardState
		obj.rewards = Object.values(json.rewards).map(x=> Element.fromJSON(x))
		return obj
	}

}

class ResPacket_BattlePassReward {
	public resultElements?: Element[];
	public static fromJSON(json:any){
		let obj = new ResPacket_BattlePassReward()
		obj.resultElements = Object.values(json.resultElements).map(x=> Element.fromJSON(x))
		return obj
	}

}

class ResPacket_BattlePassExLevelReward {
	public resultElements?: Element[];
	public static fromJSON(json:any){
		let obj = new ResPacket_BattlePassExLevelReward()
		obj.resultElements = Object.values(json.resultElements).map(x=> Element.fromJSON(x))
		return obj
	}

}

class ResPacket_ExitExpDungeon {
	public userExp?: number;
	public personalityinfos?: StagePersonalityInfoFormat[];
	public acquiredtickets?: Element[];
	public rewards?: Element[];
	public clearInfo?: ExpDungeonClearInfoFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_ExitExpDungeon()
		obj.userExp = json.userExp
		obj.personalityinfos = Object.values(json.personalityinfos).map(x=> StagePersonalityInfoFormat.fromJSON(x))
		obj.acquiredtickets = Object.values(json.acquiredtickets).map(x=> Element.fromJSON(x))
		obj.rewards = Object.values(json.rewards).map(x=> Element.fromJSON(x))
		obj.clearInfo = ExpDungeonClearInfoFormat.fromJSON(json.clearInfo)
		return obj
	}

}

class ResPacket_SkipExpDungeon {
	public userExp?: number;
	public rewards?: Element[];
	public static fromJSON(json:any){
		let obj = new ResPacket_SkipExpDungeon()
		obj.userExp = json.userExp
		obj.rewards = Object.values(json.rewards).map(x=> Element.fromJSON(x))
		return obj
	}

}

class ResPacket_ExitThreadDungeon {
	public userExp?: number;
	public rewards?: Element[];
	public clearInfo?: ThreadDungeonClearInfoFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_ExitThreadDungeon()
		obj.userExp = json.userExp
		obj.rewards = Object.values(json.rewards).map(x=> Element.fromJSON(x))
		obj.clearInfo = ThreadDungeonClearInfoFormat.fromJSON(json.clearInfo)
		return obj
	}

}

class ResPacket_GetDailyDungeonClearInfo {
	public expDungeonClearInfo?: ExpDungeonClearInfoFormat[];
	public threadDungeonClearInfo?: ThreadDungeonClearInfoFormat[];
	public ExpDungeonClearInfo?: ExpDungeonClearInfoFormat[];
	public ThreadDungeonClearInfo?: ThreadDungeonClearInfoFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_GetDailyDungeonClearInfo()
		obj.expDungeonClearInfo = Object.values(json.expDungeonClearInfo).map(x=> ExpDungeonClearInfoFormat.fromJSON(x))
		obj.threadDungeonClearInfo = Object.values(json.threadDungeonClearInfo).map(x=> ThreadDungeonClearInfoFormat.fromJSON(x))
		obj.ExpDungeonClearInfo = Object.values(json.ExpDungeonClearInfo).map(x=> ExpDungeonClearInfoFormat.fromJSON(x))
		obj.ThreadDungeonClearInfo = Object.values(json.ThreadDungeonClearInfo).map(x=> ThreadDungeonClearInfoFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_SkipThreadDungeon {
	public userExp?: number;
	public rewards?: Element[];
	public static fromJSON(json:any){
		let obj = new ResPacket_SkipThreadDungeon()
		obj.userExp = json.userExp
		obj.rewards = Object.values(json.rewards).map(x=> Element.fromJSON(x))
		return obj
	}

}

class ResPacket_GetDailyLoginState {
	public weekid?: number;
	public id?: number;
	public rewardstates?: DailyLoginRewardStateFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_GetDailyLoginState()
		obj.weekid = json.weekid
		obj.id = json.id
		obj.rewardstates = Object.values(json.rewardstates).map(x=> DailyLoginRewardStateFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_AcquireDailyLoginReward {
	public rewards?: Element[];
	public static fromJSON(json:any){
		let obj = new ResPacket_AcquireDailyLoginReward()
		obj.rewards = Object.values(json.rewards).map(x=> Element.fromJSON(x))
		return obj
	}

}

class StoryDungeonSaveInfoFormat {
	public dungeonid?: number;
	public currentinfo?: StoryDungeonCurrentInfoFormat;
	public static fromJSON(json:any){
		let obj = new StoryDungeonSaveInfoFormat()
		obj.dungeonid = json.dungeonid
		obj.currentinfo = StoryDungeonCurrentInfoFormat.fromJSON(json.currentinfo)
		return obj
	}

}

class ResPacket_GetStoryDungeonSaveInfo {
	public saveInfo?: StoryDungeonSaveInfoFormat;
	public SaveInfo?: StoryDungeonSaveInfoFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_GetStoryDungeonSaveInfo()
		obj.saveInfo = StoryDungeonSaveInfoFormat.fromJSON(json.saveInfo)
		obj.SaveInfo = StoryDungeonSaveInfoFormat.fromJSON(json.SaveInfo)
		return obj
	}

}

class ReqPacket_EnterStoryDungeon {
	public mainchapterid?: number;
	public subchapterid?: number;
	public nodeid?: number;
	public stageid?: number;
	public personalities?: StoryDungeonSaveUnitInfoFormat[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_EnterStoryDungeon()
		obj.mainchapterid = json.mainchapterid
		obj.subchapterid = json.subchapterid
		obj.nodeid = json.nodeid
		obj.stageid = json.stageid
		obj.personalities = Object.values(json.personalities).map(x=> StoryDungeonSaveUnitInfoFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_EnterStoryDungeon {
	public saveInfo?: StoryDungeonSaveInfoFormat;
	public nodesRecord?: number[];
	public SaveInfo?: StoryDungeonSaveInfoFormat;
	public NodesRecord?: number[];
	public static fromJSON(json:any){
		let obj = new ResPacket_EnterStoryDungeon()
		obj.saveInfo = StoryDungeonSaveInfoFormat.fromJSON(json.saveInfo)
		obj.nodesRecord = json.nodesRecord
		obj.SaveInfo = StoryDungeonSaveInfoFormat.fromJSON(json.SaveInfo)
		obj.NodesRecord = json.NodesRecord
		return obj
	}

}

class ResPacket_ReEnterStoryDungeon {
	public saveInfo?: StoryDungeonSaveInfoFormat;
	public nodesRecord?: number[];
	public statistics?: DungeonStatisticsDataFormat[];
	public SaveInfo?: StoryDungeonSaveInfoFormat;
	public NodesRecord?: number[];
	public Statistics?: DungeonStatisticsDataFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_ReEnterStoryDungeon()
		obj.saveInfo = StoryDungeonSaveInfoFormat.fromJSON(json.saveInfo)
		obj.nodesRecord = json.nodesRecord
		obj.statistics = Object.values(json.statistics).map(x=> DungeonStatisticsDataFormat.fromJSON(x))
		obj.SaveInfo = StoryDungeonSaveInfoFormat.fromJSON(json.SaveInfo)
		obj.NodesRecord = json.NodesRecord
		obj.Statistics = Object.values(json.Statistics).map(x=> DungeonStatisticsDataFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_ExitStoryDungeonCommand {
	public saveInfo?: StoryDungeonSaveInfoFormat;
	public iswin?: boolean;
	public cleartype?: number;
	public addexptouser?: number;
	public personalityinfos?: StagePersonalityInfoFormat[];
	public expticket?: Element[];
	public rewarditem?: Element[];
	public exrewarditem?: Element[];
	public givebackstaminabyDefeat?: Element;
	public statistics?: DungeonStatisticsDataFormat[];
	public isGacksung?: boolean;
	public SaveInfo?: StoryDungeonSaveInfoFormat;
	public Statistics?: DungeonStatisticsDataFormat[];
	public IsGacksung?: boolean;
	public static fromJSON(json:any){
		let obj = new ResPacket_ExitStoryDungeonCommand()
		obj.saveInfo = StoryDungeonSaveInfoFormat.fromJSON(json.saveInfo)
		obj.iswin = json.iswin
		obj.cleartype = json.cleartype
		obj.addexptouser = json.addexptouser
		obj.personalityinfos = Object.values(json.personalityinfos).map(x=> StagePersonalityInfoFormat.fromJSON(x))
		obj.expticket = Object.values(json.expticket).map(x=> Element.fromJSON(x))
		obj.rewarditem = Object.values(json.rewarditem).map(x=> Element.fromJSON(x))
		obj.exrewarditem = Object.values(json.exrewarditem).map(x=> Element.fromJSON(x))
		obj.givebackstaminabyDefeat = Element.fromJSON(json.givebackstaminabyDefeat)
		obj.statistics = Object.values(json.statistics).map(x=> DungeonStatisticsDataFormat.fromJSON(x))
		obj.isGacksung = json.isGacksung
		obj.SaveInfo = StoryDungeonSaveInfoFormat.fromJSON(json.SaveInfo)
		obj.Statistics = Object.values(json.Statistics).map(x=> DungeonStatisticsDataFormat.fromJSON(x))
		obj.IsGacksung = json.IsGacksung
		return obj
	}

}

class ResPacket_ExitStoryCommand {
	public rewarditem?: Element[];
	public exrewarditem?: Element[];
	public static fromJSON(json:any){
		let obj = new ResPacket_ExitStoryCommand()
		obj.rewarditem = Object.values(json.rewarditem).map(x=> Element.fromJSON(x))
		obj.exrewarditem = Object.values(json.exrewarditem).map(x=> Element.fromJSON(x))
		return obj
	}

}

class GachaLogDetail {
	public type?: string;
	public _type?: ELEMENT_TYPE;
	public id?: number;
	public ex?: Element;
	public _origin?: Element;
	public Type?: ELEMENT_TYPE;
	public Id?: number;
	public static fromJSON(json:any){
		let obj = new GachaLogDetail()
		obj.type = json.type
		obj._type = json._type
		obj.id = json.id
		obj.ex = Element.fromJSON(json.ex)
		obj._origin = Element.fromJSON(json._origin)
		obj.Type = json.Type
		obj.Id = json.Id
		return obj
	}

}

class GachaLog {
	public gachaId?: number;
	public gachaDate?: string;
	public paymentId?: number;
	public payments?: ItemFormat[];
	public gachaLogDetails?: GachaLogDetail[];
	public GachaId?: number;
	public PaymentId?: number;
	public Payments?: ItemFormat[];
	public GachaLogDetails?: GachaLogDetail[];
	public static fromJSON(json:any){
		let obj = new GachaLog()
		obj.gachaId = json.gachaId
		obj.gachaDate = json.gachaDate
		obj.paymentId = json.paymentId
		obj.payments = Object.values(json.payments).map(x=> ItemFormat.fromJSON(x))
		obj.gachaLogDetails = Object.values(json.gachaLogDetails).map(x=> GachaLogDetail.fromJSON(x))
		obj.GachaId = json.GachaId
		obj.PaymentId = json.PaymentId
		obj.Payments = Object.values(json.Payments).map(x=> ItemFormat.fromJSON(x))
		obj.GachaLogDetails = Object.values(json.GachaLogDetails).map(x=> GachaLogDetail.fromJSON(x))
		return obj
	}

}

class ResPacket_UseGachaPityPoint {
	public gachaLogDetails?: GachaLogDetail[];
	public static fromJSON(json:any){
		let obj = new ResPacket_UseGachaPityPoint()
		obj.gachaLogDetails = Object.values(json.gachaLogDetails).map(x=> GachaLogDetail.fromJSON(x))
		return obj
	}

}

class ResPacket_ClaimClosedGachaRewards {
	public pityPointDataList?: PityPoint[];
	public static fromJSON(json:any){
		let obj = new ResPacket_ClaimClosedGachaRewards()
		obj.pityPointDataList = Object.values(json.pityPointDataList).map(x=> PityPoint.fromJSON(x))
		return obj
	}

}

class ReqPacket_UseItem {
	public itemId?: number;
	public usage?: number;
	public targetIdx?: number;
	public target?: Element;
	public static fromJSON(json:any){
		let obj = new ReqPacket_UseItem()
		obj.itemId = json.itemId
		obj.usage = json.usage
		obj.targetIdx = json.targetIdx
		obj.target = Element.fromJSON(json.target)
		return obj
	}

}

class ResPacket_UseItem {
	public pickedUpElementList?: Element[];
	public resultElementList?: Element[];
	public static fromJSON(json:any){
		let obj = new ResPacket_UseItem()
		obj.pickedUpElementList = Object.values(json.pickedUpElementList).map(x=> Element.fromJSON(x))
		obj.resultElementList = Object.values(json.resultElementList).map(x=> Element.fromJSON(x))
		return obj
	}

}

class ReqPacket_UsePersonalityExpItem {
	public targetPersonalityId?: number;
	public items?: ItemFormat[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_UsePersonalityExpItem()
		obj.targetPersonalityId = json.targetPersonalityId
		obj.items = Object.values(json.items).map(x=> ItemFormat.fromJSON(x))
		return obj
	}

}

class UserPublicProfileWithSupportersFormat {
	public support_personalities?: SupportPersonalitySlotFormat[];
	public static fromJSON(json:any){
		let obj = new UserPublicProfileWithSupportersFormat()
		obj.support_personalities = Object.values(json.support_personalities).map(x=> SupportPersonalitySlotFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_LoadUserDataAll {
	public secession_Date?: string;
	public profile?: UserPublicProfileWithSupportersFormat;
	public isExistReceiveFriendRequest?: boolean;
	public danteNoteTodayPage?: number;
	public dailyLoginRewardStates?: DailyLoginRewardStateFormat[];
	public dailyLoginWeekId?: number;
	public dailyLoginId?: number;
	public showedWeekByMinistory?: number;
	public date?: string;
	public IsExistReceiveFriendRequest?: boolean;
	public static fromJSON(json:any){
		let obj = new ResPacket_LoadUserDataAll()
		obj.secession_Date = json.secession_Date
		obj.profile = UserPublicProfileWithSupportersFormat.fromJSON(json.profile)
		obj.isExistReceiveFriendRequest = json.isExistReceiveFriendRequest
		obj.danteNoteTodayPage = json.danteNoteTodayPage
		obj.dailyLoginRewardStates = Object.values(json.dailyLoginRewardStates).map(x=> DailyLoginRewardStateFormat.fromJSON(x))
		obj.dailyLoginWeekId = json.dailyLoginWeekId
		obj.dailyLoginId = json.dailyLoginId
		obj.showedWeekByMinistory = json.showedWeekByMinistory
		obj.date = json.date
		obj.IsExistReceiveFriendRequest = json.IsExistReceiveFriendRequest
		return obj
	}

}

class SeasonLogFormat {
	public seasonTo?: number;
	public seasonFrom?: number;
	public unreceivedBattlePassRewards?: Element[];
	public lostPieces?: ItemFormat[];
	public acquiredFromLostPieces?: ItemFormat[];
	public lostPackages?: ItemFormat[];
	public acquiredFromLostPackages?: ItemFormat[];
	public date?: string;
	public static fromJSON(json:any){
		let obj = new SeasonLogFormat()
		obj.seasonTo = json.seasonTo
		obj.seasonFrom = json.seasonFrom
		obj.unreceivedBattlePassRewards = Object.values(json.unreceivedBattlePassRewards).map(x=> Element.fromJSON(x))
		obj.lostPieces = Object.values(json.lostPieces).map(x=> ItemFormat.fromJSON(x))
		obj.acquiredFromLostPieces = Object.values(json.acquiredFromLostPieces).map(x=> ItemFormat.fromJSON(x))
		obj.lostPackages = Object.values(json.lostPackages).map(x=> ItemFormat.fromJSON(x))
		obj.acquiredFromLostPackages = Object.values(json.acquiredFromLostPackages).map(x=> ItemFormat.fromJSON(x))
		obj.date = json.date
		return obj
	}

}

class ResPacket_CheckSeasonLog {
	public seasonLog?: SeasonLogFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_CheckSeasonLog()
		obj.seasonLog = SeasonLogFormat.fromJSON(json.seasonLog)
		return obj
	}

}

class LobbyCgDetailFormat {
	public id?: number;
	public g?: number;
	public static fromJSON(json:any){
		let obj = new LobbyCgDetailFormat()
		obj.id = json.id
		obj.g = json.g
		return obj
	}

}

class MailFormat {
	public mail_id?: number;
	public sent_date?: string;
	public expiry_date?: string;
	public content_id?: number;
	public attachments?: Element[];
	public parameters?: string[];
	public static fromJSON(json:any){
		let obj = new MailFormat()
		obj.mail_id = json.mail_id
		obj.sent_date = json.sent_date
		obj.expiry_date = json.expiry_date
		obj.content_id = json.content_id
		obj.attachments = Object.values(json.attachments).map(x=> Element.fromJSON(x))
		obj.parameters = json.parameters
		return obj
	}

}

class ResPacket_UnsealMails {
	public attachedElements?: Element[];
	public static fromJSON(json:any){
		let obj = new ResPacket_UnsealMails()
		obj.attachedElements = Object.values(json.attachedElements).map(x=> Element.fromJSON(x))
		return obj
	}

}

class MailLog {
	public maillog_id?: number;
	public sent_date?: string;
	public content_id?: number;
	public attachments?: Element[];
	public unsealed_date?: string;
	public parameters?: string[];
	public MailLogId?: number;
	public ContentId?: number;
	public Attachments?: Element[];
	public static fromJSON(json:any){
		let obj = new MailLog()
		obj.maillog_id = json.maillog_id
		obj.sent_date = json.sent_date
		obj.content_id = json.content_id
		obj.attachments = Object.values(json.attachments).map(x=> Element.fromJSON(x))
		obj.unsealed_date = json.unsealed_date
		obj.parameters = json.parameters
		obj.MailLogId = json.MailLogId
		obj.ContentId = json.ContentId
		obj.Attachments = Object.values(json.Attachments).map(x=> Element.fromJSON(x))
		return obj
	}

}

class MirrorDungeonGetCharacterInfoFormat {
	public pid?: number;
	public egos?: DungeonEgoFormat[];
	public static fromJSON(json:any){
		let obj = new MirrorDungeonGetCharacterInfoFormat()
		obj.pid = json.pid
		obj.egos = Object.values(json.egos).map(x=> DungeonEgoFormat.fromJSON(x))
		return obj
	}

}

class MirrorDungeonFormationEgoFormat {
	public prevEgoId?: number;
	public nextEgoId?: number;
	public static fromJSON(json:any){
		let obj = new MirrorDungeonFormationEgoFormat()
		obj.prevEgoId = json.prevEgoId
		obj.nextEgoId = json.nextEgoId
		return obj
	}

}

class ReqPacket_UpdateMirrorDungeonMapNodeCommand {
	public currentnode?: DungeonMapNodeFormat;
	public choiceEventData?: DungeonChoiceEventSaveDataFormat;
	public dungeonUnitList?: MirrorDungeonSaveUnitInfoFormat[];
	public updatedEgoGifts?: DungeonMapEgoGiftFormat[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_UpdateMirrorDungeonMapNodeCommand()
		obj.currentnode = DungeonMapNodeFormat.fromJSON(json.currentnode)
		obj.choiceEventData = DungeonChoiceEventSaveDataFormat.fromJSON(json.choiceEventData)
		obj.dungeonUnitList = Object.values(json.dungeonUnitList).map(x=> MirrorDungeonSaveUnitInfoFormat.fromJSON(x))
		obj.updatedEgoGifts = Object.values(json.updatedEgoGifts).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		return obj
	}

}

class ReqPacket_AcquireCharacterEventDataMirrorDungeonCommand {
	public acquirePersonalities?: MirrorDungeonGetCharacterInfoFormat[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_AcquireCharacterEventDataMirrorDungeonCommand()
		obj.acquirePersonalities = Object.values(json.acquirePersonalities).map(x=> MirrorDungeonGetCharacterInfoFormat.fromJSON(x))
		return obj
	}

}

class RandomDungeonLevelUpPersonalityInfoFormat {
	public pid?: number;
	public ego?: DungeonEgoFormat;
	public static fromJSON(json:any){
		let obj = new RandomDungeonLevelUpPersonalityInfoFormat()
		obj.pid = json.pid
		obj.ego = DungeonEgoFormat.fromJSON(json.ego)
		return obj
	}

}

class ReqPacket_PersonalityLevelUpEventMirrorDungeonCommand {
	public levelUpPersonalityFormat?: RandomDungeonLevelUpPersonalityInfoFormat;
	public static fromJSON(json:any){
		let obj = new ReqPacket_PersonalityLevelUpEventMirrorDungeonCommand()
		obj.levelUpPersonalityFormat = RandomDungeonLevelUpPersonalityInfoFormat.fromJSON(json.levelUpPersonalityFormat)
		return obj
	}

}

class FormationDetailFormat {
	public personalityId?: number;
	public egos?: number[];
	public isParticipated?: boolean;
	public participationOrder?: number;
	public static fromJSON(json:any){
		let obj = new FormationDetailFormat()
		obj.personalityId = json.personalityId
		obj.egos = json.egos
		obj.isParticipated = json.isParticipated
		obj.participationOrder = json.participationOrder
		return obj
	}

}

class ResPacket_GetUserBanners {
	public banners?: UserBannerDataFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_GetUserBanners()
		obj.banners = Object.values(json.banners).map(x=> UserBannerDataFormat.fromJSON(x))
		return obj
	}

}

class UserPublicProfileFormat {
	public public_uid?: string;
	public illust_id?: number;
	public illust_gacksung_level?: number;
	public leftborder_id?: number;
	public rightborder_id?: number;
	public egobackground_id?: number;
	public sentence_id?: number;
	public word_id?: number;
	public banners?: UserPublicBannerFormat[];
	public level?: number;
	public date?: string;
	public static fromJSON(json:any){
		let obj = new UserPublicProfileFormat()
		obj.public_uid = json.public_uid
		obj.illust_id = json.illust_id
		obj.illust_gacksung_level = json.illust_gacksung_level
		obj.leftborder_id = json.leftborder_id
		obj.rightborder_id = json.rightborder_id
		obj.egobackground_id = json.egobackground_id
		obj.sentence_id = json.sentence_id
		obj.word_id = json.word_id
		obj.banners = Object.values(json.banners).map(x=> UserPublicBannerFormat.fromJSON(x))
		obj.level = json.level
		obj.date = json.date
		return obj
	}

}

class ResPacket_FindFriend {
	public success?: boolean;
	public friendprofile?: UserPublicProfileFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_FindFriend()
		obj.success = json.success
		obj.friendprofile = UserPublicProfileFormat.fromJSON(json.friendprofile)
		return obj
	}

}

class ResPacket_GetRecommendFriends {
	public recomendedFriends?: UserPublicProfileFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_GetRecommendFriends()
		obj.recomendedFriends = Object.values(json.recomendedFriends).map(x=> UserPublicProfileFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_SendFriendRequest {
	public success?: number;
	public receiverprofile?: UserPublicProfileFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_SendFriendRequest()
		obj.success = json.success
		obj.receiverprofile = UserPublicProfileFormat.fromJSON(json.receiverprofile)
		return obj
	}

}

class ResPacket_GetFriendSupportPersonalities {
	public supportpersonalities?: SupportPersonalitySlotFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_GetFriendSupportPersonalities()
		obj.supportpersonalities = Object.values(json.supportpersonalities).map(x=> SupportPersonalitySlotFormat.fromJSON(x))
		return obj
	}

}

class ProfileEgoContainIndexFormat {
	public idx?: number;
	public static fromJSON(json:any){
		let obj = new ProfileEgoContainIndexFormat()
		obj.idx = json.idx
		return obj
	}

}

class ReqPacket_UpdateUserProfile {
	public illustId?: number;
	public illustGacksungLevel?: number;
	public sentenceId?: number;
	public wordId?: number;
	public banners?: UserPublicBannerFormat[];
	public supportPersonalities?: SupportPersonalitySlotFormat[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_UpdateUserProfile()
		obj.illustId = json.illustId
		obj.illustGacksungLevel = json.illustGacksungLevel
		obj.sentenceId = json.sentenceId
		obj.wordId = json.wordId
		obj.banners = Object.values(json.banners).map(x=> UserPublicBannerFormat.fromJSON(x))
		obj.supportPersonalities = Object.values(json.supportPersonalities).map(x=> SupportPersonalitySlotFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_GetProfileTicketDecoDatas {
	public leftBorders?: UserProfileBorderFormat[];
	public rightBorders?: UserProfileBorderFormat[];
	public egoBackgrounds?: UserProfileEgobackgroundFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_GetProfileTicketDecoDatas()
		obj.leftBorders = Object.values(json.leftBorders).map(x=> UserProfileBorderFormat.fromJSON(x))
		obj.rightBorders = Object.values(json.rightBorders).map(x=> UserProfileBorderFormat.fromJSON(x))
		obj.egoBackgrounds = Object.values(json.egoBackgrounds).map(x=> UserProfileEgobackgroundFormat.fromJSON(x))
		return obj
	}

}

class RailwayUnitInfoFormat {
	public pid?: number;
	public g?: number;
	public l?: number;
	public es?: DungeonEgoFormat[];
	public sp?: number;
	public gi?: number;
	public IsFriendSupport?: boolean;
	public IsGacksungIllust?: boolean;
	public static fromJSON(json:any){
		let obj = new RailwayUnitInfoFormat()
		obj.pid = json.pid
		obj.g = json.g
		obj.l = json.l
		obj.es = Object.values(json.es).map(x=> DungeonEgoFormat.fromJSON(x))
		obj.sp = json.sp
		obj.gi = json.gi
		obj.IsFriendSupport = json.IsFriendSupport
		obj.IsGacksungIllust = json.IsGacksungIllust
		return obj
	}

}

class RailwayNodeDataFormat {
	public nodeid?: number;
	public egostocks?: RailwayEGOStockFormat[];
	public status?: RailwayUnitStatusFormat[];
	public clearturn?: number;
	public statistics?: RailwayStatisticsDataFormat[];
	public static fromJSON(json:any){
		let obj = new RailwayNodeDataFormat()
		obj.nodeid = json.nodeid
		obj.egostocks = Object.values(json.egostocks).map(x=> RailwayEGOStockFormat.fromJSON(x))
		obj.status = Object.values(json.status).map(x=> RailwayUnitStatusFormat.fromJSON(x))
		obj.clearturn = json.clearturn
		obj.statistics = Object.values(json.statistics).map(x=> RailwayStatisticsDataFormat.fromJSON(x))
		return obj
	}

}

class RailwayTurnsPerNode {
	public nid?: number;
	public turn?: number;
	public static fromJSON(json:any){
		let obj = new RailwayTurnsPerNode()
		obj.nid = json.nid
		obj.turn = json.turn
		return obj
	}

}

class HellsChickenDungeonGetCharacterInfoFormat {
	public pid?: number;
	public egos?: DungeonEgoFormat[];
	public sp?: number;
	public static fromJSON(json:any){
		let obj = new HellsChickenDungeonGetCharacterInfoFormat()
		obj.pid = json.pid
		obj.egos = Object.values(json.egos).map(x=> DungeonEgoFormat.fromJSON(x))
		obj.sp = json.sp
		return obj
	}

}

class RandomDungeonMapFormat {
	public ns?: RandomDungeonMapNodeFormatForMapFormat[];
	public static fromJSON(json:any){
		let obj = new RandomDungeonMapFormat()
		obj.ns = Object.values(json.ns).map(x=> RandomDungeonMapNodeFormatForMapFormat.fromJSON(x))
		return obj
	}

}

class ReqPacket_UpdateHellsChickenDungeonCommand {
	public characterInfos?: HellsChickenDungeonGetCharacterInfoContainGacksungFormat[];
	public map?: RandomDungeonMapFormat;
	public choiceEventList?: number[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_UpdateHellsChickenDungeonCommand()
		obj.characterInfos = Object.values(json.characterInfos).map(x=> HellsChickenDungeonGetCharacterInfoContainGacksungFormat.fromJSON(x))
		obj.map = RandomDungeonMapFormat.fromJSON(json.map)
		obj.choiceEventList = json.choiceEventList
		return obj
	}

}

class AbnormalityUnlockInformationFormat {
	public id?: number;
	public k?: number;
	public s?: number[];
	public p?: number[];
	public ps?: PartResistFormat[];
	public static fromJSON(json:any){
		let obj = new AbnormalityUnlockInformationFormat()
		obj.id = json.id
		obj.k = json.k
		obj.s = json.s
		obj.p = json.p
		obj.ps = Object.values(json.ps).map(x=> PartResistFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_EnterHellsChickendungeonMapNodeBattleAfterChoice {
	public abnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public AbnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_EnterHellsChickendungeonMapNodeBattleAfterChoice()
		obj.abnormalityLogs = Object.values(json.abnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.AbnormalityLogs = Object.values(json.AbnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		return obj
	}

}

class ReqPacket_ExitHellsChickenDungeonMapNodeCommand {
	public dungeonunitlist?: HellsChickenDungeonSaveUnitInfoFormat[];
	public noderesult?: number;
	public choiceEventData?: DungeonChoiceEventSaveDataFormat;
	public battlePassParameters?: BattlePassParameterFormat;
	public abnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public isupdatedEgoSkillStock?: number;
	public egoSkillStockList?: DungeonEgoSkillStockFormat[];
	public updatedEgoGifts?: DungeonMapEgoGiftFormat[];
	public statistics?: DungeonStatisticsDataFormat[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_ExitHellsChickenDungeonMapNodeCommand()
		obj.dungeonunitlist = Object.values(json.dungeonunitlist).map(x=> HellsChickenDungeonSaveUnitInfoFormat.fromJSON(x))
		obj.noderesult = json.noderesult
		obj.choiceEventData = DungeonChoiceEventSaveDataFormat.fromJSON(json.choiceEventData)
		obj.battlePassParameters = BattlePassParameterFormat.fromJSON(json.battlePassParameters)
		obj.abnormalityLogs = Object.values(json.abnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.isupdatedEgoSkillStock = json.isupdatedEgoSkillStock
		obj.egoSkillStockList = Object.values(json.egoSkillStockList).map(x=> DungeonEgoSkillStockFormat.fromJSON(x))
		obj.updatedEgoGifts = Object.values(json.updatedEgoGifts).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		obj.statistics = Object.values(json.statistics).map(x=> DungeonStatisticsDataFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_ExitHellsChickenDungeonMapNodeCommand {
	public currentInfo?: HellsChickenDungeonCurrentInfoFormat;
	public abnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public CurrentInfo?: HellsChickenDungeonCurrentInfoFormat;
	public AbnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_ExitHellsChickenDungeonMapNodeCommand()
		obj.currentInfo = HellsChickenDungeonCurrentInfoFormat.fromJSON(json.currentInfo)
		obj.abnormalityLogs = Object.values(json.abnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.CurrentInfo = HellsChickenDungeonCurrentInfoFormat.fromJSON(json.CurrentInfo)
		obj.AbnormalityLogs = Object.values(json.AbnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		return obj
	}

}

class ReqPacket_AcquireCharacterEventDataHellsChickenDungeonCommand {
	public acquirePersonalities?: HellsChickenDungeonGetCharacterInfoFormat[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_AcquireCharacterEventDataHellsChickenDungeonCommand()
		obj.acquirePersonalities = Object.values(json.acquirePersonalities).map(x=> HellsChickenDungeonGetCharacterInfoFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_EnterThreadDungeon {
	public isClear?: number;
	public abnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_EnterThreadDungeon()
		obj.isClear = json.isClear
		obj.abnormalityLogs = Object.values(json.abnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		return obj
	}

}

class ReqPacket_ExitThreadDungeon {
	public isWin?: number;
	public battlePassParameters?: BattlePassParameterFormat;
	public abnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_ExitThreadDungeon()
		obj.isWin = json.isWin
		obj.battlePassParameters = BattlePassParameterFormat.fromJSON(json.battlePassParameters)
		obj.abnormalityLogs = Object.values(json.abnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_GetStageProgressRateRewardCommand {
	public rewardList?: Element[];
	public Reward?: Element[];
	public static fromJSON(json:any){
		let obj = new ResPacket_GetStageProgressRateRewardCommand()
		obj.rewardList = Object.values(json.rewardList).map(x=> Element.fromJSON(x))
		obj.Reward = Object.values(json.Reward).map(x=> Element.fromJSON(x))
		return obj
	}

}

class ResPacket_EnterStageBattleCommand {
	public abnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public AbnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_EnterStageBattleCommand()
		obj.abnormalityLogs = Object.values(json.abnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.AbnormalityLogs = Object.values(json.AbnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		return obj
	}

}

class ReqPacket_ExitStageBattleCommand {
	public mainchapterid?: number;
	public subchapterid?: number;
	public nodeid?: number;
	public stageid?: number;
	public iswin?: boolean;
	public turn?: number;
	public formationid?: number;
	public battlePassParameters?: BattlePassParameterFormat;
	public supportCharacterId?: number;
	public supportPersonalityId?: number;
	public supportEgoIds?: number[];
	public supportParticipate?: boolean;
	public abnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_ExitStageBattleCommand()
		obj.mainchapterid = json.mainchapterid
		obj.subchapterid = json.subchapterid
		obj.nodeid = json.nodeid
		obj.stageid = json.stageid
		obj.iswin = json.iswin
		obj.turn = json.turn
		obj.formationid = json.formationid
		obj.battlePassParameters = BattlePassParameterFormat.fromJSON(json.battlePassParameters)
		obj.supportCharacterId = json.supportCharacterId
		obj.supportPersonalityId = json.supportPersonalityId
		obj.supportEgoIds = json.supportEgoIds
		obj.supportParticipate = json.supportParticipate
		obj.abnormalityLogs = Object.values(json.abnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_ExitStageBattleCommand {
	public stageid?: number;
	public iswin?: boolean;
	public cleartype?: number;
	public addexptouser?: number;
	public personalityinfos?: StagePersonalityInfoFormat[];
	public expticket?: Element[];
	public rewarditem?: Element[];
	public exrewarditem?: Element[];
	public givebackstaminabyDefeat?: Element;
	public abnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public AbnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_ExitStageBattleCommand()
		obj.stageid = json.stageid
		obj.iswin = json.iswin
		obj.cleartype = json.cleartype
		obj.addexptouser = json.addexptouser
		obj.personalityinfos = Object.values(json.personalityinfos).map(x=> StagePersonalityInfoFormat.fromJSON(x))
		obj.expticket = Object.values(json.expticket).map(x=> Element.fromJSON(x))
		obj.rewarditem = Object.values(json.rewarditem).map(x=> Element.fromJSON(x))
		obj.exrewarditem = Object.values(json.exrewarditem).map(x=> Element.fromJSON(x))
		obj.givebackstaminabyDefeat = Element.fromJSON(json.givebackstaminabyDefeat)
		obj.abnormalityLogs = Object.values(json.abnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.AbnormalityLogs = Object.values(json.AbnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		return obj
	}

}

class MirrorDungeonSaveInfoFormat {
	public dungeonId?: number;
	public idx?: number;
	public currentInfo?: MirrorDungeonCurrentInfoFormat;
	public dungeonMap?: RandomDungeonMapFormat;
	public choiceEventList?: number[];
	public addUserExp?: number;
	public statistics?: DungeonStatisticsDataFormat[];
	public encounterstatistics?: number[];
	public isEndDungeon?: number;
	public isReset?: number;
	public availableweeklychance?: number;
	public availablehardrewardchance?: number;
	public version?: number;
	public static fromJSON(json:any){
		let obj = new MirrorDungeonSaveInfoFormat()
		obj.dungeonId = json.dungeonId
		obj.idx = json.idx
		obj.currentInfo = MirrorDungeonCurrentInfoFormat.fromJSON(json.currentInfo)
		obj.dungeonMap = RandomDungeonMapFormat.fromJSON(json.dungeonMap)
		obj.choiceEventList = json.choiceEventList
		obj.addUserExp = json.addUserExp
		obj.statistics = Object.values(json.statistics).map(x=> DungeonStatisticsDataFormat.fromJSON(x))
		obj.encounterstatistics = json.encounterstatistics
		obj.isEndDungeon = json.isEndDungeon
		obj.isReset = json.isReset
		obj.availableweeklychance = json.availableweeklychance
		obj.availablehardrewardchance = json.availablehardrewardchance
		obj.version = json.version
		return obj
	}

}

class RailwayDungeonSaveInfoFormat {
	public id?: number;
	public currentclearnode?: number;
	public lastclearnode?: number;
	public personalities?: RailwayUnitInfoFormat[];
	public payreward?: number;
	public rewardstate?: number;
	public IsPayReward?: boolean;
	public static fromJSON(json:any){
		let obj = new RailwayDungeonSaveInfoFormat()
		obj.id = json.id
		obj.currentclearnode = json.currentclearnode
		obj.lastclearnode = json.lastclearnode
		obj.personalities = Object.values(json.personalities).map(x=> RailwayUnitInfoFormat.fromJSON(x))
		obj.payreward = json.payreward
		obj.rewardstate = json.rewardstate
		obj.IsPayReward = json.IsPayReward
		return obj
	}

}

class ResPacket_EnterStoryDungeonMapNodeCommand {
	public node?: DungeonMapNodeFormat;
	public nr?: number;
	public abnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public Node?: DungeonMapNodeFormat;
	public NodeResult?: number;
	public AbnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_EnterStoryDungeonMapNodeCommand()
		obj.node = DungeonMapNodeFormat.fromJSON(json.node)
		obj.nr = json.nr
		obj.abnormalityLogs = Object.values(json.abnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.Node = DungeonMapNodeFormat.fromJSON(json.Node)
		obj.NodeResult = json.NodeResult
		obj.AbnormalityLogs = Object.values(json.AbnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_EnterStoryDungeonMapNodeBattleAfterChoice {
	public abnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public isAllDie?: number;
	public AbnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public IsAllDie?: number;
	public static fromJSON(json:any){
		let obj = new ResPacket_EnterStoryDungeonMapNodeBattleAfterChoice()
		obj.abnormalityLogs = Object.values(json.abnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.isAllDie = json.isAllDie
		obj.AbnormalityLogs = Object.values(json.AbnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.IsAllDie = json.IsAllDie
		return obj
	}

}

class ReqPacket_ExitStoryDungeonMapNodeCommand {
	public noderesult?: number;
	public choiceEventData?: DungeonChoiceEventSaveDataFormat;
	public dungeonunitlist?: StoryDungeonSaveUnitInfoFormat[];
	public battlePassParameters?: BattlePassParameterFormat;
	public abnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public openedNode?: number;
	public isupdatedEgoSkillStock?: number;
	public egoSkillStockList?: DungeonEgoSkillStockFormat[];
	public updatedEgoGifts?: DungeonMapEgoGiftFormat[];
	public statistics?: DungeonStatisticsDataFormat[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_ExitStoryDungeonMapNodeCommand()
		obj.noderesult = json.noderesult
		obj.choiceEventData = DungeonChoiceEventSaveDataFormat.fromJSON(json.choiceEventData)
		obj.dungeonunitlist = Object.values(json.dungeonunitlist).map(x=> StoryDungeonSaveUnitInfoFormat.fromJSON(x))
		obj.battlePassParameters = BattlePassParameterFormat.fromJSON(json.battlePassParameters)
		obj.abnormalityLogs = Object.values(json.abnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.openedNode = json.openedNode
		obj.isupdatedEgoSkillStock = json.isupdatedEgoSkillStock
		obj.egoSkillStockList = Object.values(json.egoSkillStockList).map(x=> DungeonEgoSkillStockFormat.fromJSON(x))
		obj.updatedEgoGifts = Object.values(json.updatedEgoGifts).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		obj.statistics = Object.values(json.statistics).map(x=> DungeonStatisticsDataFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_ExitStoryDungeonMapNodeCommand {
	public saveInfo?: StoryDungeonSaveInfoFormat;
	public abnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public acquiredEgogifts?: DungeonMapEgoGiftFormat[];
	public isAllDie?: number;
	public SaveInfo?: StoryDungeonSaveInfoFormat;
	public AbnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public AcquiredEgogifts?: DungeonMapEgoGiftFormat[];
	public IsAllDie?: number;
	public static fromJSON(json:any){
		let obj = new ResPacket_ExitStoryDungeonMapNodeCommand()
		obj.saveInfo = StoryDungeonSaveInfoFormat.fromJSON(json.saveInfo)
		obj.abnormalityLogs = Object.values(json.abnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.acquiredEgogifts = Object.values(json.acquiredEgogifts).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		obj.isAllDie = json.isAllDie
		obj.SaveInfo = StoryDungeonSaveInfoFormat.fromJSON(json.SaveInfo)
		obj.AbnormalityLogs = Object.values(json.AbnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.AcquiredEgogifts = Object.values(json.AcquiredEgogifts).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		obj.IsAllDie = json.IsAllDie
		return obj
	}

}

class ResPacket_GetAbnormalityLogData {
	public logdatas?: AbnormalityUnlockInformationFormat[];
	public AbnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_GetAbnormalityLogData()
		obj.logdatas = Object.values(json.logdatas).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.AbnormalityLogs = Object.values(json.AbnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		return obj
	}

}

class ReqPacket_UpdateAbnormalityLogData {
	public battlePassParameters?: BattlePassParameterFormat;
	public abnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_UpdateAbnormalityLogData()
		obj.battlePassParameters = BattlePassParameterFormat.fromJSON(json.battlePassParameters)
		obj.abnormalityLogs = Object.values(json.abnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_UpdateAbnormalityLogData {
	public abnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public AbnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_UpdateAbnormalityLogData()
		obj.abnormalityLogs = Object.values(json.abnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.AbnormalityLogs = Object.values(json.AbnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_PlayGacha {
	public gachaLogDetails?: GachaLogDetail[];
	public static fromJSON(json:any){
		let obj = new ResPacket_PlayGacha()
		obj.gachaLogDetails = Object.values(json.gachaLogDetails).map(x=> GachaLogDetail.fromJSON(x))
		return obj
	}

}

class ResPacket_GetGachaLogAll {
	public gachaLogs?: GachaLog[];
	public static fromJSON(json:any){
		let obj = new ResPacket_GetGachaLogAll()
		obj.gachaLogs = Object.values(json.gachaLogs).map(x=> GachaLog.fromJSON(x))
		return obj
	}

}

class LobbyCgFormat {
	public characterId?: number;
	public lobbycgdetails?: LobbyCgDetailFormat[];
	public static fromJSON(json:any){
		let obj = new LobbyCgFormat()
		obj.characterId = json.characterId
		obj.lobbycgdetails = Object.values(json.lobbycgdetails).map(x=> LobbyCgDetailFormat.fromJSON(x))
		return obj
	}

}

class ReqPacket_LobbyCgCommand {
	public lobbyCg?: LobbyCgFormat;
	public static fromJSON(json:any){
		let obj = new ReqPacket_LobbyCgCommand()
		obj.lobbyCg = LobbyCgFormat.fromJSON(json.lobbyCg)
		return obj
	}

}

class ResPacket_RefreshMailbox {
	public initializedMailList?: MailFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_RefreshMailbox()
		obj.initializedMailList = Object.values(json.initializedMailList).map(x=> MailFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_GetMailLogAll {
	public mailLogs?: MailLog[];
	public static fromJSON(json:any){
		let obj = new ResPacket_GetMailLogAll()
		obj.mailLogs = Object.values(json.mailLogs).map(x=> MailLog.fromJSON(x))
		return obj
	}

}

class ResPacket_GetMirrorDungeonSaveInfoAll {
	public originSaveInfo?: MirrorDungeonSaveInfoFormat;
	public simulationsaveInfo?: MirrorDungeonSaveInfoFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_GetMirrorDungeonSaveInfoAll()
		obj.originSaveInfo = MirrorDungeonSaveInfoFormat.fromJSON(json.originSaveInfo)
		obj.simulationsaveInfo = MirrorDungeonSaveInfoFormat.fromJSON(json.simulationsaveInfo)
		return obj
	}

}

class ResPacket_GetMirrorDungeonSaveInfo {
	public saveInfo?: MirrorDungeonSaveInfoFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_GetMirrorDungeonSaveInfo()
		obj.saveInfo = MirrorDungeonSaveInfoFormat.fromJSON(json.saveInfo)
		return obj
	}

}

class ResPacket_EnterMirrorDungeonCommand {
	public saveInfo?: MirrorDungeonSaveInfoFormat;
	public recentCharacterList?: MirrorDungeonGetCharacterInfoFormat[];
	public SaveInfo?: MirrorDungeonSaveInfoFormat;
	public RecentCharacterList?: MirrorDungeonGetCharacterInfoFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_EnterMirrorDungeonCommand()
		obj.saveInfo = MirrorDungeonSaveInfoFormat.fromJSON(json.saveInfo)
		obj.recentCharacterList = Object.values(json.recentCharacterList).map(x=> MirrorDungeonGetCharacterInfoFormat.fromJSON(x))
		obj.SaveInfo = MirrorDungeonSaveInfoFormat.fromJSON(json.SaveInfo)
		obj.RecentCharacterList = Object.values(json.RecentCharacterList).map(x=> MirrorDungeonGetCharacterInfoFormat.fromJSON(x))
		return obj
	}

}

class MirrorDungeonFormationFormat {
	public pervPersonalityId?: number;
	public nextPersonalityId?: number;
	public egos?: MirrorDungeonFormationEgoFormat[];
	public static fromJSON(json:any){
		let obj = new MirrorDungeonFormationFormat()
		obj.pervPersonalityId = json.pervPersonalityId
		obj.nextPersonalityId = json.nextPersonalityId
		obj.egos = Object.values(json.egos).map(x=> MirrorDungeonFormationEgoFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_UpdateMirrorDungeonCommand {
	public saveInfo?: MirrorDungeonSaveInfoFormat;
	public SaveInfo?: MirrorDungeonSaveInfoFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_UpdateMirrorDungeonCommand()
		obj.saveInfo = MirrorDungeonSaveInfoFormat.fromJSON(json.saveInfo)
		obj.SaveInfo = MirrorDungeonSaveInfoFormat.fromJSON(json.SaveInfo)
		return obj
	}

}

class ResPacket_GetMirrorDungeonLastReward {
	public rewardlist?: Element[];
	public saveInfo?: MirrorDungeonSaveInfoFormat;
	public chip?: number;
	public SaveInfo?: MirrorDungeonSaveInfoFormat;
	public Chip?: number;
	public static fromJSON(json:any){
		let obj = new ResPacket_GetMirrorDungeonLastReward()
		obj.rewardlist = Object.values(json.rewardlist).map(x=> Element.fromJSON(x))
		obj.saveInfo = MirrorDungeonSaveInfoFormat.fromJSON(json.saveInfo)
		obj.chip = json.chip
		obj.SaveInfo = MirrorDungeonSaveInfoFormat.fromJSON(json.SaveInfo)
		obj.Chip = json.Chip
		return obj
	}

}

class ResPacket_EnterMirrorDungeonMapNodeCommand {
	public abnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public passingNodeIds?: number[];
	public currentNode?: DungeonMapNodeFormat;
	public shopInfo?: UserMirrorDungeonShopDataFormat;
	public egogifts?: DungeonMapEgoGiftFormat[];
	public prevdul?: MirrorDungeonPrevUnitInfoFormat[];
	public preves?: number[];
	public AbnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public PassingNodeIds?: number[];
	public CurrentNode?: DungeonMapNodeFormat;
	public ShopInfo?: UserMirrorDungeonShopDataFormat;
	public Egogifts?: DungeonMapEgoGiftFormat[];
	public PrevDul?: MirrorDungeonPrevUnitInfoFormat[];
	public PrevEgos?: number[];
	public static fromJSON(json:any){
		let obj = new ResPacket_EnterMirrorDungeonMapNodeCommand()
		obj.abnormalityLogs = Object.values(json.abnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.passingNodeIds = json.passingNodeIds
		obj.currentNode = DungeonMapNodeFormat.fromJSON(json.currentNode)
		obj.shopInfo = UserMirrorDungeonShopDataFormat.fromJSON(json.shopInfo)
		obj.egogifts = Object.values(json.egogifts).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		obj.prevdul = Object.values(json.prevdul).map(x=> MirrorDungeonPrevUnitInfoFormat.fromJSON(x))
		obj.preves = json.preves
		obj.AbnormalityLogs = Object.values(json.AbnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.PassingNodeIds = json.PassingNodeIds
		obj.CurrentNode = DungeonMapNodeFormat.fromJSON(json.CurrentNode)
		obj.ShopInfo = UserMirrorDungeonShopDataFormat.fromJSON(json.ShopInfo)
		obj.Egogifts = Object.values(json.Egogifts).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		obj.PrevDul = Object.values(json.PrevDul).map(x=> MirrorDungeonPrevUnitInfoFormat.fromJSON(x))
		obj.PrevEgos = json.PrevEgos
		return obj
	}

}

class ResPacket_EnterMirrordungeonMapNodeBattleAfterChoice {
	public abnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public AbnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_EnterMirrordungeonMapNodeBattleAfterChoice()
		obj.abnormalityLogs = Object.values(json.abnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.AbnormalityLogs = Object.values(json.AbnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		return obj
	}

}

class ReqPacket_ExitMirrorDungeonMapNodeCommand {
	public currentnode?: DungeonMapNodeFormat;
	public dungeonunitlist?: MirrorDungeonSaveUnitInfoFormat[];
	public noderesult?: number;
	public choiceEventData?: DungeonChoiceEventSaveDataFormat;
	public battlePassParameters?: BattlePassParameterFormat;
	public abnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public isupdatedEgoSkillStock?: number;
	public egoSkillStockList?: DungeonEgoSkillStockFormat[];
	public updatedEgoGifts?: DungeonMapEgoGiftFormat[];
	public statistics?: DungeonStatisticsDataFormat[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_ExitMirrorDungeonMapNodeCommand()
		obj.currentnode = DungeonMapNodeFormat.fromJSON(json.currentnode)
		obj.dungeonunitlist = Object.values(json.dungeonunitlist).map(x=> MirrorDungeonSaveUnitInfoFormat.fromJSON(x))
		obj.noderesult = json.noderesult
		obj.choiceEventData = DungeonChoiceEventSaveDataFormat.fromJSON(json.choiceEventData)
		obj.battlePassParameters = BattlePassParameterFormat.fromJSON(json.battlePassParameters)
		obj.abnormalityLogs = Object.values(json.abnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.isupdatedEgoSkillStock = json.isupdatedEgoSkillStock
		obj.egoSkillStockList = Object.values(json.egoSkillStockList).map(x=> DungeonEgoSkillStockFormat.fromJSON(x))
		obj.updatedEgoGifts = Object.values(json.updatedEgoGifts).map(x=> DungeonMapEgoGiftFormat.fromJSON(x))
		obj.statistics = Object.values(json.statistics).map(x=> DungeonStatisticsDataFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_ExitMirrorDungeonMapNodeCommand {
	public currentInfo?: MirrorDungeonCurrentInfoFormat;
	public abnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public CurrentInfo?: MirrorDungeonCurrentInfoFormat;
	public AbnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_ExitMirrorDungeonMapNodeCommand()
		obj.currentInfo = MirrorDungeonCurrentInfoFormat.fromJSON(json.currentInfo)
		obj.abnormalityLogs = Object.values(json.abnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.CurrentInfo = MirrorDungeonCurrentInfoFormat.fromJSON(json.CurrentInfo)
		obj.AbnormalityLogs = Object.values(json.AbnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		return obj
	}

}

class ReqPacket_PurchaseFormation {
	public formation?: MirrorDungeonFormationFormat[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_PurchaseFormation()
		obj.formation = Object.values(json.formation).map(x=> MirrorDungeonFormationFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_GetMirrorDungeonPreset {
	public recentCharacterList?: MirrorDungeonFormationFormat[];
	public RecentCharacterList?: MirrorDungeonFormationFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_GetMirrorDungeonPreset()
		obj.recentCharacterList = Object.values(json.recentCharacterList).map(x=> MirrorDungeonFormationFormat.fromJSON(x))
		obj.RecentCharacterList = Object.values(json.RecentCharacterList).map(x=> MirrorDungeonFormationFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_SelectMirrorDungeonRandomPickFormation {
	public formation?: MirrorDungeonFormationFormat[];
	public Formation?: MirrorDungeonFormationFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_SelectMirrorDungeonRandomPickFormation()
		obj.formation = Object.values(json.formation).map(x=> MirrorDungeonFormationFormat.fromJSON(x))
		obj.Formation = Object.values(json.Formation).map(x=> MirrorDungeonFormationFormat.fromJSON(x))
		return obj
	}

}

class FormationFormat {
	public id?: number;
	public formationDetails?: FormationDetailFormat[];
	public static fromJSON(json:any){
		let obj = new FormationFormat()
		obj.id = json.id
		obj.formationDetails = Object.values(json.formationDetails).map(x=> FormationDetailFormat.fromJSON(x))
		return obj
	}

}

class ReqPacket_UpdateFormationCommand {
	public formation?: FormationFormat;
	public static fromJSON(json:any){
		let obj = new ReqPacket_UpdateFormationCommand()
		obj.formation = FormationFormat.fromJSON(json.formation)
		return obj
	}

}

class ResPacket_GetFriendsData {
	public friendprofileList?: UserPublicProfileFormat[];
	public sendprofileList?: UserPublicProfileFormat[];
	public receiveprofileList?: UserPublicProfileFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_GetFriendsData()
		obj.friendprofileList = Object.values(json.friendprofileList).map(x=> UserPublicProfileFormat.fromJSON(x))
		obj.sendprofileList = Object.values(json.sendprofileList).map(x=> UserPublicProfileFormat.fromJSON(x))
		obj.receiveprofileList = Object.values(json.receiveprofileList).map(x=> UserPublicProfileFormat.fromJSON(x))
		return obj
	}

}

class SupportPersonalityFormat {
	public pid?: number;
	public l?: number;
	public egos?: ProfileEgoContainIndexFormat[];
	public gl?: number;
	public gi?: number;
	public static fromJSON(json:any){
		let obj = new SupportPersonalityFormat()
		obj.pid = json.pid
		obj.l = json.l
		obj.egos = Object.values(json.egos).map(x=> ProfileEgoContainIndexFormat.fromJSON(x))
		obj.gl = json.gl
		obj.gi = json.gi
		return obj
	}

}

class ReqPacket_EnterRailwayDungeon {
	public dungeonId?: number;
	public personalities?: RailwayUnitInfoFormat[];
	public static fromJSON(json:any){
		let obj = new ReqPacket_EnterRailwayDungeon()
		obj.dungeonId = json.dungeonId
		obj.personalities = Object.values(json.personalities).map(x=> RailwayUnitInfoFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_EnterRailwayDungeon {
	public saveInfo?: RailwayDungeonSaveInfoFormat;
	public SaveInfo?: RailwayDungeonSaveInfoFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_EnterRailwayDungeon()
		obj.saveInfo = RailwayDungeonSaveInfoFormat.fromJSON(json.saveInfo)
		obj.SaveInfo = RailwayDungeonSaveInfoFormat.fromJSON(json.SaveInfo)
		return obj
	}

}

class ResPacket_EnterRailwayDungeonMapNodeCommand {
	public nodeid?: number;
	public deletedNodeIds?: number[];
	public abnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public prevStatusData?: RailwayUnitStatusFormat[];
	public prevEgoStockData?: RailwayEGOStockFormat[];
	public NodeId?: number;
	public NewCurrentClearNodeId?: number;
	public DeletedNodeIds?: number[];
	public AbnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public PrevStatusData?: RailwayUnitStatusFormat[];
	public PrevEgoStockData?: RailwayEGOStockFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_EnterRailwayDungeonMapNodeCommand()
		obj.nodeid = json.nodeid
		obj.deletedNodeIds = json.deletedNodeIds
		obj.abnormalityLogs = Object.values(json.abnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.prevStatusData = Object.values(json.prevStatusData).map(x=> RailwayUnitStatusFormat.fromJSON(x))
		obj.prevEgoStockData = Object.values(json.prevEgoStockData).map(x=> RailwayEGOStockFormat.fromJSON(x))
		obj.NodeId = json.NodeId
		obj.NewCurrentClearNodeId = json.NewCurrentClearNodeId
		obj.DeletedNodeIds = json.DeletedNodeIds
		obj.AbnormalityLogs = Object.values(json.AbnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.PrevStatusData = Object.values(json.PrevStatusData).map(x=> RailwayUnitStatusFormat.fromJSON(x))
		obj.PrevEgoStockData = Object.values(json.PrevEgoStockData).map(x=> RailwayEGOStockFormat.fromJSON(x))
		return obj
	}

}

class RailwayLogDataFormat {
	public idx?: number;
	public personalities?: RailwayUnitInfoFormat[];
	public statistics?: RailwayStatisticsDataFormat[];
	public clearturn?: number;
	public turnspernode?: RailwayTurnsPerNode[];
	public date?: string;
	public deadunitnumber?: number;
	public static fromJSON(json:any){
		let obj = new RailwayLogDataFormat()
		obj.idx = json.idx
		obj.personalities = Object.values(json.personalities).map(x=> RailwayUnitInfoFormat.fromJSON(x))
		obj.statistics = Object.values(json.statistics).map(x=> RailwayStatisticsDataFormat.fromJSON(x))
		obj.clearturn = json.clearturn
		obj.turnspernode = Object.values(json.turnspernode).map(x=> RailwayTurnsPerNode.fromJSON(x))
		obj.date = json.date
		obj.deadunitnumber = json.deadunitnumber
		return obj
	}

}

class ReqPacket_ExitRailwayDungeonMapNodeCommand {
	public dungeonId?: number;
	public nodeid?: number;
	public unitStatusList?: RailwayUnitStatusFormat[];
	public egoSkillStockList?: RailwayEGOStockFormat[];
	public battlePassParameters?: BattlePassParameterFormat;
	public abnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public statistics?: RailwayStatisticsDataFormat[];
	public clearTurn?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_ExitRailwayDungeonMapNodeCommand()
		obj.dungeonId = json.dungeonId
		obj.nodeid = json.nodeid
		obj.unitStatusList = Object.values(json.unitStatusList).map(x=> RailwayUnitStatusFormat.fromJSON(x))
		obj.egoSkillStockList = Object.values(json.egoSkillStockList).map(x=> RailwayEGOStockFormat.fromJSON(x))
		obj.battlePassParameters = BattlePassParameterFormat.fromJSON(json.battlePassParameters)
		obj.abnormalityLogs = Object.values(json.abnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.statistics = Object.values(json.statistics).map(x=> RailwayStatisticsDataFormat.fromJSON(x))
		obj.clearTurn = json.clearTurn
		return obj
	}

}

class ResPacket_ExitRailwayDungeonMapNodeCommand {
	public saveInfo?: RailwayDungeonSaveInfoFormat;
	public abnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public nodeData?: RailwayNodeDataFormat;
	public SaveInfo?: RailwayDungeonSaveInfoFormat;
	public AbnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public NodeData?: RailwayNodeDataFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_ExitRailwayDungeonMapNodeCommand()
		obj.saveInfo = RailwayDungeonSaveInfoFormat.fromJSON(json.saveInfo)
		obj.abnormalityLogs = Object.values(json.abnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.nodeData = RailwayNodeDataFormat.fromJSON(json.nodeData)
		obj.SaveInfo = RailwayDungeonSaveInfoFormat.fromJSON(json.SaveInfo)
		obj.AbnormalityLogs = Object.values(json.AbnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.NodeData = RailwayNodeDataFormat.fromJSON(json.NodeData)
		return obj
	}

}

class ResPacket_ExitRailwayDungeonCommand {
	public isclear?: boolean;
	public saveInfo?: RailwayDungeonSaveInfoFormat;
	public currentLog?: RailwayLogDataFormat;
	public rewards?: Element[];
	public IsClear?: boolean;
	public SaveInfo?: RailwayDungeonSaveInfoFormat;
	public CurrentLog?: RailwayLogDataFormat;
	public Rewards?: Element[];
	public static fromJSON(json:any){
		let obj = new ResPacket_ExitRailwayDungeonCommand()
		obj.isclear = json.isclear
		obj.saveInfo = RailwayDungeonSaveInfoFormat.fromJSON(json.saveInfo)
		obj.currentLog = RailwayLogDataFormat.fromJSON(json.currentLog)
		obj.rewards = Object.values(json.rewards).map(x=> Element.fromJSON(x))
		obj.IsClear = json.IsClear
		obj.SaveInfo = RailwayDungeonSaveInfoFormat.fromJSON(json.SaveInfo)
		obj.CurrentLog = RailwayLogDataFormat.fromJSON(json.CurrentLog)
		obj.Rewards = Object.values(json.Rewards).map(x=> Element.fromJSON(x))
		return obj
	}

}

class ResPacket_AcquireRailwayDungeonReward {
	public saveInfo?: RailwayDungeonSaveInfoFormat;
	public rewardList?: Element[];
	public SaveInfo?: RailwayDungeonSaveInfoFormat;
	public RewardList?: Element[];
	public static fromJSON(json:any){
		let obj = new ResPacket_AcquireRailwayDungeonReward()
		obj.saveInfo = RailwayDungeonSaveInfoFormat.fromJSON(json.saveInfo)
		obj.rewardList = Object.values(json.rewardList).map(x=> Element.fromJSON(x))
		obj.SaveInfo = RailwayDungeonSaveInfoFormat.fromJSON(json.SaveInfo)
		obj.RewardList = Object.values(json.RewardList).map(x=> Element.fromJSON(x))
		return obj
	}

}

class HellsChickenDungeonSaveInfoFormat {
	public dungeonid?: number;
	public currentinfo?: HellsChickenDungeonCurrentInfoFormat;
	public map?: RandomDungeonMapFormat;
	public choiceeventlist?: number[];
	public statistics?: DungeonStatisticsDataFormat[];
	public static fromJSON(json:any){
		let obj = new HellsChickenDungeonSaveInfoFormat()
		obj.dungeonid = json.dungeonid
		obj.currentinfo = HellsChickenDungeonCurrentInfoFormat.fromJSON(json.currentinfo)
		obj.map = RandomDungeonMapFormat.fromJSON(json.map)
		obj.choiceeventlist = json.choiceeventlist
		obj.statistics = Object.values(json.statistics).map(x=> DungeonStatisticsDataFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_EnterHellsChickenDungeonCommand {
	public saveInfo?: HellsChickenDungeonSaveInfoFormat;
	public recentCharacterList?: HellsChickenDungeonGetCharacterInfoFormat[];
	public SaveInfo?: HellsChickenDungeonSaveInfoFormat;
	public RecentCharacterList?: HellsChickenDungeonGetCharacterInfoFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_EnterHellsChickenDungeonCommand()
		obj.saveInfo = HellsChickenDungeonSaveInfoFormat.fromJSON(json.saveInfo)
		obj.recentCharacterList = Object.values(json.recentCharacterList).map(x=> HellsChickenDungeonGetCharacterInfoFormat.fromJSON(x))
		obj.SaveInfo = HellsChickenDungeonSaveInfoFormat.fromJSON(json.SaveInfo)
		obj.RecentCharacterList = Object.values(json.RecentCharacterList).map(x=> HellsChickenDungeonGetCharacterInfoFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_ReEnterHellsChickenDungeon {
	public saveInfo?: HellsChickenDungeonSaveInfoFormat;
	public recentCharacterList?: HellsChickenDungeonGetCharacterInfoFormat[];
	public SaveInfo?: HellsChickenDungeonSaveInfoFormat;
	public RecentCharacterList?: HellsChickenDungeonGetCharacterInfoFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_ReEnterHellsChickenDungeon()
		obj.saveInfo = HellsChickenDungeonSaveInfoFormat.fromJSON(json.saveInfo)
		obj.recentCharacterList = Object.values(json.recentCharacterList).map(x=> HellsChickenDungeonGetCharacterInfoFormat.fromJSON(x))
		obj.SaveInfo = HellsChickenDungeonSaveInfoFormat.fromJSON(json.SaveInfo)
		obj.RecentCharacterList = Object.values(json.RecentCharacterList).map(x=> HellsChickenDungeonGetCharacterInfoFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_UpdateHellsChickenDungeonCommand {
	public saveInfo?: HellsChickenDungeonSaveInfoFormat;
	public SaveInfo?: HellsChickenDungeonSaveInfoFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_UpdateHellsChickenDungeonCommand()
		obj.saveInfo = HellsChickenDungeonSaveInfoFormat.fromJSON(json.saveInfo)
		obj.SaveInfo = HellsChickenDungeonSaveInfoFormat.fromJSON(json.SaveInfo)
		return obj
	}

}

class ResPacket_ExitHellsChickenDungeonCommand {
	public saveInfo?: HellsChickenDungeonSaveInfoFormat;
	public iswin?: boolean;
	public statistics?: DungeonStatisticsDataFormat[];
	public cleartype?: number;
	public adduserexp?: number;
	public personalityinfos?: StagePersonalityInfoFormat[];
	public normalrewards?: Element[];
	public exrewards?: Element[];
	public expticket?: Element[];
	public givebackstaminabyDefeat?: Element;
	public IsWin?: boolean;
	public Statistics?: DungeonStatisticsDataFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_ExitHellsChickenDungeonCommand()
		obj.saveInfo = HellsChickenDungeonSaveInfoFormat.fromJSON(json.saveInfo)
		obj.iswin = json.iswin
		obj.statistics = Object.values(json.statistics).map(x=> DungeonStatisticsDataFormat.fromJSON(x))
		obj.cleartype = json.cleartype
		obj.adduserexp = json.adduserexp
		obj.personalityinfos = Object.values(json.personalityinfos).map(x=> StagePersonalityInfoFormat.fromJSON(x))
		obj.normalrewards = Object.values(json.normalrewards).map(x=> Element.fromJSON(x))
		obj.exrewards = Object.values(json.exrewards).map(x=> Element.fromJSON(x))
		obj.expticket = Object.values(json.expticket).map(x=> Element.fromJSON(x))
		obj.givebackstaminabyDefeat = Element.fromJSON(json.givebackstaminabyDefeat)
		obj.IsWin = json.IsWin
		obj.Statistics = Object.values(json.Statistics).map(x=> DungeonStatisticsDataFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_EnterHellsChickenDungeonMapNodeCommand {
	public abnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public passingNodeIds?: number[];
	public currentNode?: DungeonMapNodeFormat;
	public AbnormalityLogs?: AbnormalityUnlockInformationFormat[];
	public PassingNodeIds?: number[];
	public CurrentNode?: DungeonMapNodeFormat;
	public static fromJSON(json:any){
		let obj = new ResPacket_EnterHellsChickenDungeonMapNodeCommand()
		obj.abnormalityLogs = Object.values(json.abnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.passingNodeIds = json.passingNodeIds
		obj.currentNode = DungeonMapNodeFormat.fromJSON(json.currentNode)
		obj.AbnormalityLogs = Object.values(json.AbnormalityLogs).map(x=> AbnormalityUnlockInformationFormat.fromJSON(x))
		obj.PassingNodeIds = json.PassingNodeIds
		obj.CurrentNode = DungeonMapNodeFormat.fromJSON(json.CurrentNode)
		return obj
	}

}

class ResPacket_GetDungeonSaveInfoAll {
	public storySaveInfo?: StoryDungeonSaveInfoFormat;
	public mirrorOriginSaveInfo?: MirrorDungeonSaveInfoFormat;
	public railwaySaveInfo?: RailwayDungeonSaveInfoFormat;
	public hellschickenSaveInfo?: HellsChickenDungeonSaveInfoFormat;
	public mirrorDungeonClearInfos?: MirrorDungeonClearInfoFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_GetDungeonSaveInfoAll()
		obj.storySaveInfo = StoryDungeonSaveInfoFormat.fromJSON(json.storySaveInfo)
		obj.mirrorOriginSaveInfo = MirrorDungeonSaveInfoFormat.fromJSON(json.mirrorOriginSaveInfo)
		obj.railwaySaveInfo = RailwayDungeonSaveInfoFormat.fromJSON(json.railwaySaveInfo)
		obj.hellschickenSaveInfo = HellsChickenDungeonSaveInfoFormat.fromJSON(json.hellschickenSaveInfo)
		obj.mirrorDungeonClearInfos = Object.values(json.mirrorDungeonClearInfos).map(x=> MirrorDungeonClearInfoFormat.fromJSON(x))
		return obj
	}

}

class ReqPacket_UpdateMirrorDungeonCommand {
	public characterInfos?: MirrorDungeonGetCharacterInfoFormat[];
	public formation?: MirrorDungeonFormationFormat[];
	public map?: RandomDungeonMapFormat;
	public choiceEventList?: number[];
	public isRandomPick?: number;
	public static fromJSON(json:any){
		let obj = new ReqPacket_UpdateMirrorDungeonCommand()
		obj.characterInfos = Object.values(json.characterInfos).map(x=> MirrorDungeonGetCharacterInfoFormat.fromJSON(x))
		obj.formation = Object.values(json.formation).map(x=> MirrorDungeonFormationFormat.fromJSON(x))
		obj.map = RandomDungeonMapFormat.fromJSON(json.map)
		obj.choiceEventList = json.choiceEventList
		obj.isRandomPick = json.isRandomPick
		return obj
	}

}

class ResPacket_GetFriendSupportPersonalitiesByCharacterId {
	public supportpersonalities?: SupportPersonalityFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_GetFriendSupportPersonalitiesByCharacterId()
		obj.supportpersonalities = Object.values(json.supportpersonalities).map(x=> SupportPersonalityFormat.fromJSON(x))
		return obj
	}

}

class ResPacket_GetRailwayDungeonNodeAndLogAllCommand {
	public nodeDatas?: RailwayNodeDataFormat[];
	public logDatas?: RailwayLogDataFormat[];
	public static fromJSON(json:any){
		let obj = new ResPacket_GetRailwayDungeonNodeAndLogAllCommand()
		obj.nodeDatas = Object.values(json.nodeDatas).map(x=> RailwayNodeDataFormat.fromJSON(x))
		obj.logDatas = Object.values(json.logDatas).map(x=> RailwayLogDataFormat.fromJSON(x))
		return obj
	}

}

